.TH "JsonObject" 3 "2018年 六月 29日 星期五" "Version 3.0" "xlang" \" -*- nroff -*-
.ad l
.nh
.SH NAME
JsonObject \- json类  

.SH SYNOPSIS
.br
.PP
.SS "包函数"
.SH "详细描述"
.PP 
json类 
.PP
在文件 JsonObject\&.xcs 第 6 行定义\&.
.SH "构造及析构函数说明"
.PP 
.SS "\fBJsonObject\fP ()\fC [package]\fP"

.PP
构造一个json对象 
.SS "\fBJsonObject\fP (\fBString\fP text)\fC [package]\fP"

.PP
从Json字符串构造一个Json对象 
.PP
\fB参数:\fP
.RS 4
\fItext\fP Json字符串 
.RE
.PP
\fB异常:\fP
.RS 4
\fIIllegalArgumentException\fP 参数不正确(解析失败) 
.br
\fINullPointerException\fP 空指针异常 
.RE
.PP

.SH "成员函数说明"
.PP 
.SS "\fBJsonObject\fP child ()\fC [package]\fP"

.PP
获取子对象 
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "\fBJsonObject\fP clone ()\fC [package]\fP"

.PP
克隆对象 
.PP
\fB返回:\fP
.RS 4
新对象 
.RE
.PP

.SS "bool equals (\fBJsonObject\fP value)\fC [package]\fP"

.PP
测试两个数据对象是否同一个 
.PP
\fB参数:\fP
.RS 4
\fIvalue\fP value 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "\fBJsonObject\fP get (\fBString\fP key)\fC [package]\fP"

.PP
获取指定key的值 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "\fBJsonArray\fP getArray (\fBString\fP key)\fC [package]\fP"

.PP
获取指定key的值 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "bool getBool (\fBString\fP key)\fC [package]\fP"

.PP
获取指定key的值 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "double getDouble (\fBString\fP key)\fC [package]\fP"

.PP
获取指定key的值 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "int getInt (\fBString\fP key)\fC [package]\fP"

.PP
获取指定key的值 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "\fBString\fP getName ()\fC [package]\fP"

.PP
获取对象名 
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "\fBString\fP getString (\fBString\fP key)\fC [package]\fP"

.PP
获取指定key的值 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "bool has (\fBString\fP key)\fC [package]\fP"

.PP
测试是否包含key 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "bool isNull (\fBString\fP key)\fC [package]\fP"

.PP
测试key对应的值是否为空 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "bool next ()\fC [package]\fP"

.PP
移动到下一个对象 
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "bool prev ()\fC [package]\fP"

.PP
移动到上一个对象 
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "\fBJsonObject\fP put (\fBString\fP key, int value)\fC [package]\fP"

.PP
插入数据 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.br
\fIvalue\fP value 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
新的数据对象 
.RE
.PP

.SS "\fBJsonObject\fP put (\fBString\fP key, double value)\fC [package]\fP"

.PP
插入数据 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.br
\fIvalue\fP value 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
新的数据对象 
.RE
.PP

.SS "\fBJsonObject\fP put (\fBString\fP key, bool value)\fC [package]\fP"

.PP
插入数据 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.br
\fIvalue\fP value 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
新的数据对象 
.RE
.PP

.SS "\fBJsonObject\fP put (\fBString\fP key, \fBString\fP value)\fC [package]\fP"

.PP
插入数据 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.br
\fIvalue\fP value 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
新的数据对象 
.RE
.PP

.SS "\fBJsonObject\fP put (\fBString\fP key, \fBJsonArray\fP value)\fC [package]\fP"

.PP
插入数据 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.br
\fIvalue\fP value 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
新的数据对象 
.RE
.PP

.SS "\fBJsonObject\fP put (\fBString\fP key, \fBJsonObject\fP value)\fC [package]\fP"

.PP
插入数据 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.br
\fIvalue\fP value 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
新的数据对象 
.RE
.PP

.SS "bool remove (\fBString\fP key)\fC [package]\fP"

.PP
删除key指定的数据 
.PP
\fB参数:\fP
.RS 4
\fIkey\fP key 
.RE
.PP
\fB异常:\fP
.RS 4
\fINullPointerException\fP 空指针异常 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP

.SS "\fBString\fP toString (bool bident)\fC [package]\fP"

.PP
生成json字符串 
.PP
\fB参数:\fP
.RS 4
\fIbident\fP 是否保持缩进格式 
.RE
.PP
\fB返回:\fP
.RS 4
结果 
.RE
.PP


.SH "作者"
.PP 
由 Doyxgen 通过分析 xlang 的 源代码自动生成\&.
