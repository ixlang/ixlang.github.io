//xlang Source, Name:Game.xcsm 
//Date: Fri Oct 12:31:34 2018 

class Game{

	static const int _n_width = 21, _n_height = 21;
    
    int [] _array_chess = new int[441];
    
    int [] _users = new int[2];
    
    int _n_request_user = 0;
    
    void update_request(long user_id){
		if (_users[0] == user_id){
			_n_request_user = _users[1];
		}else
		if (_users[1] == user_id){
			_n_request_user = _users[0];
		}
	}
    
    void setUser(int id, int uid){
		_users[id] = uid;
        _n_request_user = _users[0];
    }
    
    int getCurrentHand(){
		return _n_request_user;
    }
    
    bool set_cursor(int index, int user_id){
		return _n_request_user == user_id && index < _array_chess.length;
	}

	bool set_chess(int index, int user_id){

		if (_n_request_user != user_id || index < 0 || index > 440){
			return false;
		}
		_array_chess[index] = user_id;

		update_request(user_id);

		return true;
	}

    bool check_win(int useridx){

		for (int x = 0; x < _array_chess.length; x++){

			if (_array_chess[x] == useridx){

				for (int i = 0; i<8; i++){

					if (get_line_point(x, i, 0, useridx) == 4){

						return true;
					}
				}
			}
		}
		return false;
	}
    
    int get_line_point(int index, int type, int lc, int user_idx){
		int x = get_direct_index(index, type);

		if (x >= _array_chess.length){
			return lc;
		}

		if (_array_chess[x] == user_idx){
			return get_line_point(x, type, lc + 1, user_idx);
		}

		return lc;
	}

	int  get_direct_index(int index, int type)
	{
		int rt = 0;
		int x = index % _n_width;
		int y = index / _n_width;

		switch (type){
		case 0:
			if (x == 0){
				return -1;
			}
			rt = (index - 1);
			break;
		case 1:
			if (x == 0 || y == 0){
				return -1;
			}
			x--;
			y--;

			rt = x + (_n_width * y);
			break;
		case 2:
			if (y == 0){
				return -1;
			}
			y--;

			rt = x + (_n_width * y);
			break;
		case 3:
			if (y == 0 || x == (_n_width - 1)){
				return -1;
			}
			x++;
			y--;

			rt = x + (_n_width * y);
			break;
		case 4:
			if (x == (_n_width - 1)){
				return -1;
			}
			rt = (index + 1);
			break;
		case 5:
			if (y == (_n_height - 1) || x == (_n_width - 1)){
				return -1;
			}
			x++;
			y++;

			rt = x + (_n_width * y);
			break;
		case 6:
			if (y == _n_height - 1){
				return -1;
			}
			y++;
			rt = x + (_n_width * y);
			break;
		case 7:
			if (0 == x || y == (_n_height - 1)){
				return -1;
			}
			x--;
			y++;

			rt = x + (_n_width * y);
			break;
		}
		return rt;
	}
    
    void reset(){
		_users[0] = 0;
        _users[1] = 0;
        for (int i =0; i < _array_chess.length; i++){
			_array_chess[i] = 0;
        }
    }	
};