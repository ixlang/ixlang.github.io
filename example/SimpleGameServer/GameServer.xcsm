//xlang Source, Name:GameServer.xcsm 
//Date: Thu Oct 21:04:08 2018 

class GameServer : IServer{

	//通用网络服务器接口
	Unsi unsi = new Unsi();
    
    //远程调用服务
	RCPServer rcp = new RCPServer();
    
    Map<int ,User> user_list = new Map<int, User>();
    Map<int, Room> room_list = new Map<int, Room>();
    int roomid = 100;
    
    
    
        //消息回调通知
    IRCPEventHandler rcph = new IRCPEventHandler(){
    
		bool onNewInstance(long context, int type)override{
			return true;
        }
		bool onDeleteInstance(long context)override{
			deleteUser(context);
			return true;
        }
        void onAccessFailed(long context)override{
        
        }
        bool onTimeout(long context)override{
			return true;
        }
    };
    
    void deleteUser(long context){
		User u = takeUser(context);
        if (u != nilptr){
			Log.i("GAME_SERVER", "用户:" + u.getId() + " 已离线");
			Room r = u.getRoom();
			if (r != nilptr){
				r.take(u);
			}
        }
    }
    
    bool create(){
		return rcp.create(this, rcph, unsi);
    }
    
    User takeUser(long context){  
		User u;
        int id = unsi.getId(context);
        synchronized(user_list){
			Map.Iterator<int ,User> iter = user_list.find(id);
            if (iter != nilptr){
				u = iter.getValue();
                user_list.remove(iter);
				return u;
            }
        }
        
        return nilptr;
    }
    
    
    User getUserById(int id){    
    	synchronized(user_list){
			Map.Iterator<int ,User> iter = user_list.find(id);
            if (iter != nilptr){
				return iter.getValue();
            }
        }
        
        return nilptr;
    }
    
    User getUser(long context){
		int id = unsi.getId(context);
    	return getUserById(id);
    }
    
    Room getRoom(int id){
    	synchronized(room_list){
			Map.Iterator<int ,Room> iter = room_list.find(id);
            if (iter != nilptr){
				return iter.getValue();
            }
        }
        return nilptr;
    }
    
	//登录接口
	bool login(long context ,String nick)override{
    
		int id = unsi.getId(context);
		synchronized(user_list){
			Map.Iterator<int ,User> iter = user_list.find(id);
            if (iter != nilptr){
				iter.getValue().nick = nick;
            }else{
				User user = new User(id, nick);
                user.setContext(unsi.clone(context));
                user_list.put(id, user);
                Log.i("GAME_SERVER", "用户已登录:" + id);
            }
        }
        
        return true;
    }
    
    //创建房间
    int createRoom(long context)override{
		User u = getUser(context);
        if (u != nilptr){
			if (u.getRoom() != nilptr){
				return -1;
            }
            
            Room r = new Room();
            synchronized(room_list){
				r.setId(roomid++);
				room_list.put(r.getId(), r);
            }
            
            r.enter(rcp ,u);
            
            Log.i("GAME_SERVER",  "用户:" + u.getId() + "已创建房间" + r.getId());
            return r.getId();
        }
        
        return -1;
    }
    
    //进入房间
    bool joinRoom(long context ,int id)override{
		User u = getUser(context);
        Room r = getRoom(id);
        if (r != nilptr && u != nilptr){
			return r.enter(rcp, u);
		}
        
        return false;
    }
    
    //离开房间
    bool leaveRoom(long context)override{
		User u = getUser(context);
        if (u != nilptr){
			return u.leaveRoom();
		}
        
        return false;
    }
    
    //加入游戏
    bool joinGame(long context)override{
		User u = getUser(context);
        if (u != nilptr){
			return u.joinGame();
		}
        
        return false;
    }
    
    bool leaveGame(long context)override{
		User u = getUser(context);
        if (u != nilptr){
			return u.leaveGame();
		}
        
        return false;
    }
	//开始游戏
    bool startGame(long context, bool ready)override{
		User u = getUser(context);

        if (u != nilptr){
			return u.startGame(rcp, ready);
		}
        
        return false;
    }
    
	//
    void sendMessageToRoom(long context ,String message)override{
		User u = getUser(context);
        if (u != nilptr){
			u.sendRoomMessage(rcp, message);
		}
    }
    
    //退出
    void exit(long context)override{
    
    }
    
    //发送消息给用户
    void sendMessageToUser(long context ,int uid, String message)override{
		User u = getUser(context);
        User t = getUserById(uid);
        if (u != nilptr && t != nilptr){
			t.sendMessage(rcp, u, message);
        }
    }
    
    //获取自己的id
    int getMyId(long context)override{
		User u = getUser(context);
        if (u != nilptr){
			return u.getId();
        }
        return -1;
    }
    
    //走子
    bool setChess(long context ,int index)override{
		User u = getUser(context);
        if (u != nilptr){
			return u.setChess(rcp, index);
		}
        return false;
    }
    
        
    int [] getRoomList(long context )override{
		int []rooms ;
        
		synchronized(room_list){
        
			rooms = new int[room_list.size()];
            
			Map.Iterator<int, Room> iter = room_list.iterator();
            
            int i = 0;
            while (iter.hasNext()){
				rooms[i++] = iter.getKey();
                
                iter.next();
            }
        }
        
		return rooms;
    }
    
    
    String getRoomInfo(long context , int room)override{
		Room r = getRoom(room);
        if (r != nilptr){
			return r.getRoomInfo();
        }
        return nilptr;
    }
        
    
};