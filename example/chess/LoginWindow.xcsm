//xlang Source, Name:LoginWindow.xcsm 
//Date: Tue Oct 18:50:09 2018 

class LoginWindow : QXDialog{
    QXPushButton btnLogin, btnCreateRoom, btnSend, enterRoom, btnStart;
	GameClient client = new GameClient();
    QXTreeView roomlist, userlist;
    QXLineEdit edtName, edtMsg;
    QXComboBox cbbObj;
	QXCheckBox chkJoinGame;
    
    ChessWindow gameWindow;
    
    bool bReady = false;
    bool bGameStart = false;
    
    QXSci _sci;
    int [] rooms_in_hall;
    String users_in_room;
    int current_room_id;
    Map<int, JsonObject> userMap = new Map<int, JsonObject>();
    
    int myid;
    static const int LOGIN_FAILED = 0,
		LOGIN_OK = 1,
        UPDATE_ROOM = 2, 
        CREATEROOM_OK = 3,
        CREATEROOM_FAILED = 4,
        UPDATE_USER = 5;
        
    LoginWindow(){
		super();
    }
    
    
    IClient _client = new IClient(){
	//走子
		void setChess(long context ,int index, int user)override{
			gameWindow.sd.setChess(index % 21, index / 21, user);
            gameWindow.runOnUi(new Runnable(){
				void run()override{
					gameWindow.repaint();
                }
            });
		}
		
		//游戏开始
		void onGameStart(long context ,int []user)override{
		
		}
		
		//你赢了
		void youwin(long context, int uid)override{
			gameWindow.runOnUi(new Runnable(){
				void run()override{
					String nick;
					if (uid == myid){
						nick = "你";
					}else{
						nick = getNick(uid);
						if (nick == nilptr){
							nick = "用户" + uid;
						}
					}
					
					QXMessageBox.Information("恭喜", nick + " 赢得了本局游戏的胜利", QXMessageBox.Ok, QXMessageBox.Ok);
                }
			});
		}
		
		//游戏结束
		void gameOver(long context)override{
		
		}
		
		//玩家退出
		void playerQuit(long context)override{
		
		}
		
		//用户消息
		void onUserMessage(long context ,int sender, String message)override{
			LoginWindow.this.runOnUi(new Runnable(){
				void run(){
					String nick;
					if (sender == myid){
						nick = "你";
                    }else{
						nick = getNick(sender);
                        if (nick == nilptr){
							nick = "用户"+sender;
                        }
                    }
					_sci.appendText("\n(" + nick+ ")" +" 对你说:\n" + message + "\n\n");
                }
            });
		}
		
		//房间消息
		void onRoomMessage(long context ,int sender, String message)override{
			LoginWindow.this.runOnUi(new Runnable(){
				void run(){
					String nick;
					if (sender == myid){
						nick = "你";
                    }else{
						nick = getNick(sender);
                        if (nick == nilptr){
							nick = "用户"+sender;
                        }
                    }
					_sci.appendText("\n(" + nick+ ")" +" 对大家说:\n" +  message + "\n\n");
                }
            });
		}
		
		void onUserEnter(long context ,int user, String name){
			LoginWindow.this.runOnUi(new Runnable(){
				void run(){
					_sci.appendText("用户:" + name + "已进入房间.");
                    updateRoom();
                }
            });
		}
        
        void onGameStart(long context, int firstHand)override{
        	LoginWindow.this.runOnUi(new Runnable(){
				void run(){
					_sci.appendText("\n用户游戏开始\n");
					gameWindow = ChessApp.showGameWindow(client.rcp.rcs, myid);
                    updateRoom();
                }
            });
		}
        
        void onUserStatusUpdate(long context){
			queryUserList(current_room_id);
        }
    };
    
	bool create()override{
		if (load("ui/login.ui")){
			client.setClient(_client);
            
			setFixedSize(width(), height());
            edtName = (QXLineEdit)attachByName(new QXLineEdit(), "edtName");
            edtMsg = (QXLineEdit)attachByName(new QXLineEdit(), "edtMsg");
			roomlist = (QXTreeView)attachByName(new QXTreeView(), "roomlist");
            userlist = (QXTreeView)attachByName(new QXTreeView(), "userlist");
            btnLogin = (QXPushButton)attachByName(new QXPushButton(), "btnLogin");
            btnCreateRoom = (QXPushButton)attachByName(new QXPushButton(), "btnCreateRoom");
            btnSend = (QXPushButton)attachByName(new QXPushButton(), "btnSend");
            enterRoom = (QXPushButton)attachByName(new QXPushButton(), "enterRoom");
            btnStart = (QXPushButton)attachByName(new QXPushButton(), "btnStart");
            cbbObj = (QXComboBox)attachByName(new QXComboBox(), "cbbObj");
            chkJoinGame = (QXCheckBox)attachByName(new QXCheckBox(), "chkJoinGame");
            
            String []colums = {"昵称", "id", "类别", "状态"};
            userlist.setColumns(colums);
            
            chkJoinGame.setCheck(false);
            
            setupEvent();
            _sci = new QXSci();
            _sci.create(this);
            _sci.move(150, 230);
            _sci.resize(500, 250);
            _sci.sendEditor(QXSci.SCI_SETCODEPAGE, QXSci.SC_CP_UTF8);
            return true;
        }
        return false;
    }
    
    void setupEvent(){
		btnLogin.setOnClickListener(new onClickListener(){
            void onClick(QXObject obj, bool checked)override{
				String name = edtName.getText();
                if (name.length() == 0){
					QXMessageBox.Critical("注意", "请填写用户名", QXMessageBox.Ok, QXMessageBox.Ok);
                    return ;
                }
                
				btnLogin.setEnabled(false);

				new Thread(){
					void run()override{
                        bool b = client.login();
                        if (b){
							b = client.rcp.rcs.login(0, name);
                        }
						Notify(b ? LOGIN_OK : LOGIN_FAILED);
                        if (b){
							myid = client.rcp.rcs.getMyId(0);
							queryRoomList();
                        }
                    }
                }.start();
            }
        });
        
        
        btnCreateRoom.setOnClickListener(new onClickListener(){
            void onClick(QXObject obj, bool checked)override{
				//btnCreateRoom.setEnabled(false);
                
				new Thread(){
					void run()override{
                        int rid = client.rcp.rcs.createRoom(0);
                        Notify((rid != -1) ? CREATEROOM_OK : CREATEROOM_FAILED);
                        if (rid != -1){
							current_room_id = rid;
                            queryRoomList();
							queryUserList(rid);
                        }
                    }
                }.start();
            }
        });
        
        btnSend.setOnClickListener(new onClickListener(){
            void onClick(QXObject obj, bool checked)override{
				//btnCreateRoom.setEnabled(false);
                String text = edtMsg.getText();
                if (text.length() == 0 || text.trim(true).length() == 0){
					QXMessageBox.Critical("注意", "发送的消息不能为空", QXMessageBox.Ok, QXMessageBox.Ok);
                    return ;
                }
                int idx = cbbObj.getCurrentIndex();
				new Thread(){
					void run()override{
						if (idx == 0){
							client.rcp.rcs.sendMessageToRoom(0, text);
                        }else{
                        	String info = users_in_room;
							if (info != nilptr){
								try{
									JsonObject root = new JsonObject(info);
									JsonArray users = (JsonArray)root.get("users");
                                    int dstid = ((JsonObject)users.get(idx - 1)).getInt("id");
                                    if (dstid == myid){
										runOnUi(new Runnable(){
											void run()override{
												QXMessageBox.Critical("注意", "不能对自己发送消息", QXMessageBox.Ok, QXMessageBox.Ok);
                                            }
                                        });
                                        return ;
                                    }
                                    client.rcp.rcs.sendMessageToUser(0, dstid, text);
									runOnUi(new Runnable(){
										void run()override{
											_sci.appendText("\n(你)" +" 对" + ((JsonObject)users.get(idx - 1)).getString("name") + "说:\n" +  text + "\n\n");
										}
									});
                                }catch(Exception e){
                                
                                
                                }
							}
                        }
                        
                        
                    }
                }.start();
            }
        });
        
        enterRoom.setOnClickListener(new onClickListener(){
            void onClick(QXObject obj, bool checked)override{
				//btnCreateRoom.setEnabled(false);
                
				new Thread(){
					void run()override{
                        long []items = roomlist.getSelectedItems();
                        if (items.length == 1){
							int rid = roomlist.getItemTag(items[0], 0);
							if (client.rcp.rcs.joinRoom(0, rid)){
								current_room_id = rid;
								updateRoom();
                            }
                        }
                        
                    }
                }.start();
            }
        });
        
        chkJoinGame.setOnClickListener(new onClickListener(){
            void onClick(QXObject obj, bool checked)override{
				//btnCreateRoom.setEnabled(false);
                
				new Thread(){
					void run()override{
						if (checked){
							client.rcp.rcs.leaveGame(0);
                        }else{
							client.rcp.rcs.joinGame(0);
                        }
                        updateRoom();
                    }
                }.start();
            }
        });
        
        
        btnStart.setOnClickListener(new onClickListener(){
            void onClick(QXObject obj, bool checked)override{
				//btnCreateRoom.setEnabled(false);
                
				new Thread(){
					void run()override{
						if (client.rcp.rcs.startGame(0, !bReady)){
							bReady = !bReady;
                        }
                        
                        runOnUi(new Runnable(){
							void run(){
								if (bReady){
									btnStart.setWindowTitle("取消准备");
                                }else{
									btnStart.setWindowTitle("取消/开始");
                                }
                            }
                        });
                    }
                }.start();
            }
        });
    }
    
    void onNotification(long id)override{
		switch(id ){
			case LOGIN_FAILED:
				QXMessageBox.Critical("注意", "登录服务器失败", QXMessageBox.Ok, QXMessageBox.Ok);
                btnLogin.setEnabled(true);
            break;
            case LOGIN_OK:
				QXMessageBox.Information("注意", "登录服务器成功", QXMessageBox.Ok, QXMessageBox.Ok);
            break;
            case UPDATE_ROOM:
				loadRoom();
            break;
            case CREATEROOM_OK:
                QXMessageBox.Information("注意", "创建房间成功", QXMessageBox.Ok, QXMessageBox.Ok);
            break;
            case CREATEROOM_FAILED:
				QXMessageBox.Critical("注意", "创建房间失败", QXMessageBox.Ok, QXMessageBox.Ok);
            break;
            case UPDATE_USER:
				loadUser();
            break;
        }
    }
    
    void loadRoom(){
		int [] rooms = rooms_in_hall;
        roomlist.clear();
        if (rooms != nilptr){
			for  (int i = 0; i < rooms.length; i++){
				long item = roomlist.addItem("res/room.png", "房间:" + rooms[i]);
                roomlist.setItemTag(item, 0, rooms[i]);
			}
        }
    }
    
    String getNick(int id){
		synchronized(userMap){
			try{
				JsonObject user =  (JsonObject)userMap.get(id);
                return user.getString("name");
			}catch(Exception e){
			
			}
        }
        return nilptr;
    }
    
    void loadUser(){
		synchronized(userMap){
			String info = users_in_room;
			userMap.clear();
			userlist.clear();
			cbbObj.clear();

			if (info != nilptr){
				JsonObject root = new JsonObject(info);
				JsonArray users = (JsonArray)root.get("users");
				bGameStart = root.getBool("start");
				String []auser = new String[users.length() + 1];
				auser[0] = "房间所有人";
				for  (int i = 0; i < users.length(); i++){
					JsonObject user = (JsonObject)users.get(i) ;
					long item = userlist.addItem("res/user.png", user.getString("name"));
					userlist.setItemText(item, 1, "" + user.getInt("id"));
					userMap.put(user.getInt("id"), user);
					bool player = user.getBool("player") ;
					userlist.setItemText(item, 2, player ? "玩家" : "观众");
					if (player){
						if (bGameStart){
							userlist.setItemText(item, 3, "游戏中...");
                        }else{
							userlist.setItemText(item, 3, user.getBool("ready") ? "已准备" : "未准备");
                        }
					}
					userlist.setItemTag(item, 0, user.getInt("id"));
					auser[i + 1] = user.getString("name");
				}
				
				cbbObj.addItems(auser);
			}
        }
    }
    
    void queryUserList(int id){
		String infos = client.rcp.rcs.getRoomInfo(0, id);
		users_in_room = infos;
        Notify(UPDATE_USER);
    }
    
    void queryRoomList(){
		int [] rooms = client.rcp.rcs.getRoomList(0);
		rooms_in_hall = rooms;
        Notify(UPDATE_ROOM);
    }
    
    void updateRoom(){
		new Thread(){
			void run(){
				queryUserList(current_room_id);
			}
		}.start();
    }
};