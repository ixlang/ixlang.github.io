
class Builder : IBuilder{
    static XWndOutput output;
    static XWndInfor infownd;

    Process buildProcess;
    
    
    Builder(){
    }
    
    static void clear(bool focus){
        output.clear(focus);
        infownd.clear();
    }

    String build(String compilerPath, String []args, String workDir)override{
        String allInfo = nilptr;
        
        if (buildProcess == nilptr){
            allInfo = "";
            String fullCommand = "";
            //String fullCommand = "xcross ";
            for (int i =0; i < args.length; i++){
                fullCommand = fullCommand + (args[i] + " ");
            }
            
			output.output(QXNative.converPlatformCharSetTo(fullCommand) + "\n");
            
            /*argss[0] = "-ce E:\\Developments\\Cadaqs\\caNamespace\\castudio\\xcross\\xlang\\xlang\\example\\qxgui\\qxapp.xcs" + 
            " E:\\Developments\\Cadaqs\\caNamespace\\castudio\\xcross\\xlang\\xlang\\example\\qxgui\\qxapp.exe";*/
            buildProcess = new Process(QXNative.converToPlatformCharSet(compilerPath), args);
            
            buildProcess.setWorkDirectory(QXNative.converToPlatformCharSet(workDir));
            
            try{
                if (buildProcess.create(false, true, false, false)){
					String lines = "";
                    try{
                        int rd = 0;
                        byte [] buffer = new byte[1024];
                        
                        while ((rd = buildProcess.read(buffer, 0, 1024)) > 0){
                            String rdinfo = new String(buffer, 0, rd);
                            
                            lines = lines + rdinfo;
                            allInfo = allInfo + rdinfo;
                                
                            int lf = -1;
                            if ((lf = lines.lastIndexOf('\n')) != -1){
								String szOut = lines.substring(0, lf);
                                
                                if (lf + 1 < lines.length()){
									lines = lines.substring(lf + 1, lines.length() - 1);
                                }else{
									lines ="";
                                }
                                
                                output.output(QXNative.converPlatformCharSetTo(szOut));
                            }
                        }
                        
                    }catch(Exception e){
                    
                    }
                    output.output(QXNative.converPlatformCharSetTo(lines));
                }
            }catch(Exception e){
                String str = e.getMessage();
                output.output("错误:" + new String(str.getBytes(), "CP936"));
            }
            buildProcess = nilptr;
        }
        
        return QXNative.converPlatformCharSetTo(allInfo);
    }
    
    void OutputText(String text)override{
        output.output(text);
    }
    void setCompileInfor(Vector<ICompileInfo> infos)override{
        infownd.showInfo(infos);
    }
};