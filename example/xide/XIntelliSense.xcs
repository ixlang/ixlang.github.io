//xlang Source, Name:XIntelliSense.xcs 
//Date: Sun Aug 21:33:35 2018 
class XIntelliSense{
	long handle;
	Project project;
	static class XIntelliResult{
		String name;
		String type;
		String prop;
		XIntelliResult _class;
		XIntelliResult[] params;
	};
	
	const int XIS_NAME = 0,
				XIS_TYPE  = 1,
				XIS_CLAS = 2,
				XIS_PROP = 3;
                
	XIntelliSense(Project proj){
		project = proj;
		handle = createXProject(proj.getProjectDir());
		int c = project.getSourceFileCount();
		for (int i =0; i < c; i++){
			addFile(handle, project.getSourcePath(i));
		}
	}
    
	XIntelliResult [] getIntelliSenseL(String source,int line){
		IntelliSenseL(handle, source, line);
		return getResult();
	}
        
	XIntelliResult [] getIntelliSense(String source,String content, long pos){
		IntelliSense(handle, source, content, pos);
		return getResult();
	}
	
	String getIntelliSenseMap(){
		genIntelliSense(handle);
		return XgetStructMap(handle);
	}
	void update(String sourcePath, String content){
		updateFile(handle, sourcePath, content);
	}
    void updateSource(String sourcePath, String newFile){
		updateSource(handle, sourcePath, newFile);
    }
	XIntelliResult [] getResult(){
		int count = getXIntelliSenseCount(handle);
		if (count == 0){
			return nilptr;
		}	
		XIntelliResult []  result = new XIntelliResult[count];
		
		for (int i = 0; i < count; i ++){
			result[i] = new XIntelliResult();
			result[i].name = getIntelliSenseItemInfo(handle, i, XIS_NAME);
			result[i].type = getIntelliSenseItemInfo(handle, i, XIS_TYPE);
			result[i].prop = getIntelliSenseItemInfo(handle, i, XIS_PROP);
			result[i]._class = new XIntelliResult();
			result[i]._class.name = getIntelliSenseItemInfo(handle, i, XIS_CLAS);
			result[i]._class.type = "31";
			if (result[i].type.equals("23")){
				int pc = getIntelliSenseFunctionParamCount(handle, i);
				result[i].params = new XIntelliResult[pc];
				for (int x =0; x < pc; x ++){
					result[i].params[x] = new XIntelliResult();
					result[i].params[x].name = getIntelliSenseFunctionParamInfo(handle, i, x, XIS_NAME);
					result[i].params[x].type = getIntelliSenseFunctionParamInfo(handle, i, x, XIS_TYPE);
					result[i].params[x]._class = new XIntelliResult();
					result[i].params[x]._class.name = getIntelliSenseFunctionParamInfo(handle, i, x, XIS_CLAS);
					result[i].params[x]._class.type = "31";
				}
			}
		}
		return result;
	}
    
    void close(){
		destroyXProject(handle);
        project = nilptr;
    }
    
	import "libXIntelliSense"{
		long cdecl createXProject(String workdir); 
        void cdecl destroyXProject(long handle);
		bool cdecl addFile(long h, String file); 
		bool cdecl updateFile(long h, String file, String content); 
        bool cdecl updateSource(long h, String file, String content); 
		bool cdecl IntelliSense(long h, String file, String content, long position); 
        
        bool cdecl IntelliSenseL(long h, String file, int line); 
		int cdecl getXIntelliSenseCount(long h); 
		String cdecl getIntelliSenseItemInfo(long h, int id, int prop);
		int cdecl getIntelliSenseFunctionParamCount(long h, int id);
		String cdecl getIntelliSenseFunctionParamInfo(long h, int id, int param, int prop);
		bool cdecl addIncPath(long h, String path);
		bool cdecl addLibPath(long h, String path);
		bool cdecl addLib(long h, String path);
		String cdecl XgetStructMap(long h);
		void cdecl genIntelliSense(long h);
	};
};