
class XWorkspace : QXMdiArea{
    QXMainWindow mainWindow;
    XWndSln slnView;
    static XFindDlg findDlg;
    static Thread _debugThread;
    Builder _builder = new Builder();
    Project currentProject;
	Thread _autoComp_thread;
    
	Thread _run_thread;
    XStackInfor stackWnd;
    XIntelliSense.XIntelliResult  [] autocomp;
	static const long AUTODOMPEVENTID = 1;
	XDebuggee debuggee = new XDebuggee(this);
    static XWorkspace workspace;
    Object xintellisencelock = new Object(), debugThreadLock = new Object(), runThreadLock = new Object();
    XWorkspace(long handle){
        super(handle);
        workspace = this;
    }
    
    void setSlnView(XWndSln wndsln){
        slnView = wndsln;
        wndsln.workspace = this;
    }
    
    QXMdiSubWindow createSubWnd(bool bshow){
        XSourceEditor wnd = new XSourceEditor(this);
        if (wnd.create(this)){
            if (bshow){
                //setViewMode(TabbedView);
                wnd.show();
            }
            updateDocumentStatus();
            return wnd;
        }
        return nilptr;
    }
    
    XIndexWindow indexPage = nilptr;
    
    void closeIndexPage(){
		if (indexPage != nilptr){
			XIndexWindow p = indexPage;
            indexPage = nilptr;
			p.close();
        }
    }
    void openIndexPage(){
		if (indexPage == nilptr){
			indexPage = new XIndexWindow();
			if (indexPage.create(this) == false){
				return ;
			}
        }
        indexPage.show();
    }
    
    static void showDocks(Object state){
		bool []bs = (bool[])state;
		int i = 0;
        QxApp._theApp.wndclass.setVisible(bs[i++]);
        QxApp._theApp.wndsln.setVisible(bs[i++]);
        QxApp._theApp.wndOutput.setVisible(bs[i++]);
        QxApp._theApp.wndInfor.setVisible(bs[i++]);
		QxApp._theApp.wndStack.setVisible(bs[i++]);
        QxApp._theApp.autoWndInfo.setVisible(bs[i++]);
        QxApp._theApp.watchWndInfo.setVisible(bs[i++]);
		QxApp._theApp.bpWndInfo.setVisible(bs[i++]);
        QxApp._theApp.findWnd.setVisible(bs[i++]);
        QxApp._theApp.memoryWnd.setVisible(bs[i++]);
        QxApp._theApp.logcatWnd.setVisible(bs[i++]);  
        QxApp._theApp.xDumpWnd.setVisible(bs[i++]);  
    }
    
     static Object hideDocks(){
		bool []bs = new bool[12];
        int i = 0;
        
        bs[i++] = QxApp._theApp.wndclass.isVisible();
        bs[i++] = QxApp._theApp.wndsln.isVisible();
        bs[i++] = QxApp._theApp.wndOutput.isVisible();
        bs[i++] = QxApp._theApp.wndInfor.isVisible();
		bs[i++] = QxApp._theApp.wndStack.isVisible();
        bs[i++] = QxApp._theApp.autoWndInfo.isVisible();
        bs[i++] = QxApp._theApp.watchWndInfo.isVisible();
		bs[i++] = QxApp._theApp.bpWndInfo.isVisible();
        bs[i++] = QxApp._theApp.findWnd.isVisible();
        bs[i++] = QxApp._theApp.memoryWnd.isVisible();
        bs[i++] = QxApp._theApp.logcatWnd.isVisible();
        bs[i++] = QxApp._theApp.xDumpWnd.isVisible();
        
        QxApp._theApp.wndclass.setVisible(false);
        QxApp._theApp.wndsln.setVisible(false);
        QxApp._theApp.wndOutput.setVisible(false);
        QxApp._theApp.wndInfor.setVisible(false);
		QxApp._theApp.wndStack.setVisible(false);
        QxApp._theApp.autoWndInfo.setVisible(false);
        QxApp._theApp.watchWndInfo.setVisible(false);
		QxApp._theApp.bpWndInfo.setVisible(false);
        QxApp._theApp.findWnd.setVisible(false);
        QxApp._theApp.memoryWnd.setVisible(false);
        QxApp._theApp.logcatWnd.setVisible(false);  
        QxApp._theApp.xDumpWnd.setVisible(false);      
         
        return bs;
    }
    
    void loadProject(String file){
		if (currentProject != nilptr){
			QXMessageBox.Critical("注意", "当前工作空间已经打开一个项目, 请先关闭已有项目", QXMessageBox.Ok, QXMessageBox.Ok);
			return ;
		}
        Project project = new Project();
        if (project.loadWorkspace(file)){
			Recently.putRecent(project.getName(), file);
			setCurrentProject(project);
            XWndClass.prepare(project);
			mainWindow.setWindowTitle(project.getName() + "[" + project.getLanguage() +  "] - XIDE");
			XIntelliSense();
			XMenuManager.setProjectLoaded(true);
            closeIndexPage();
            
            String text = project.getComment();
            if (text != nilptr && text.length() > 0){
				showComment();
            }
		}else{
			QXMessageBox.Critical("失败", "不是有效的项目文件:" + file, QXMessageBox.Ok, QXMessageBox.Ok);
		}
    } 
    bool openTextFile(String file){
        return XSourceEditor.openForFile(this, file);
    }
    bool openTextFileInfo(String file, int line ,int row){
        return XSourceEditor.openForFileInfo(this, file, line, row, nilptr);
    }
	bool closeFor(String file){
		return XSourceEditor.closeForFile(file);
	}
    void setCurrentProject(Project project){
        currentProject = project;
        slnView.loadProject(currentProject);
    }

    bool requestQuit(){
		bool bclose = true;
		if (currentProject != nilptr){
			if (currentProject.isModified()){
				int rt = QXMessageBox.Question("提示","项目[" + currentProject.getName() + "]已发生更改, 是否保存?",  QXMessageBox.Cancel | QXMessageBox.No | QXMessageBox.Save, QXMessageBox.Save);
				if (rt == QXMessageBox.Save){
					saveProject();
					bclose = true;
				}else
				if (rt == QXMessageBox.No){
					bclose = true;
				}else
				if (rt == QXMessageBox.Cancel){
					bclose = false;
				}
			}
            if (bclose){
				bclose = closeProject();
            }
		}
		return bclose;
	}
    bool showProperites(){
        if (currentProject != nilptr){
            QXDialog newDlg = new QXDialog();
            if (newDlg.load("ui/properites.ui") == false){
                return false;
            }
            XProperites wizard = new XProperites(currentProject);
            wizard.attach(newDlg);
            return true;
        }
        return false;
    }
    
    void showComment(){
		 if (currentProject != nilptr){
			String szComment = currentProject.getComment();
 
			TextDetail td = new TextDetail(new TextDetail.closeListener(){
				void onClose(String text){
					if (currentProject != nilptr){
						currentProject.setComment(text);
					}
				}
                
                void onCreate(){
					QPoint pt = mainWindow.mapToGlobal(mainWindow.width() - 400, mainWindow.height() - 300);
                    td.move(pt.x - 10, pt.y - 25);
                }
			});
            
			td.create(currentProject.getName() + " - 项目注释", szComment);
		
         }
    }
        
    bool showSetting(){
		QXDialog newDlg = new QXDialog();
		if (newDlg.load("ui/setting.ui") == false){
			return false;
		}
		Setting wizard = new Setting();
		wizard.attach(newDlg);
		return true;
    }
    
    static bool isDebugging(){
		return _debugThread != nilptr;
    }
    
    bool debugPrepare(String host, int port){
		synchronized(debugThreadLock){
			if (_debugThread == nilptr){
				XWorkspace.updateDebugStatus(true);
				if (false == debuggee.createDebugServer(_builder, port)){
					_builder.OutputText("\n无法创建调试端口!\n");
				}else{
					_debugThread = new Thread(){
						void run(){
							debuggee.debug_start();
							XWorkspace.updateDebugStatus(false);
                            synchronized(debugThreadLock){
								_debugThread = nilptr;
                            }
						}
					};
                }
                return true;
            } 
        }
        return false;
    }
    
    void debugClose(){
		synchronized(debugThreadLock){
			if (_debugThread != nilptr){
				debuggee.debugClose();
                XWorkspace.updateDebugStatus(false);
                _debugThread = nilptr;
			}
		}
    }
    
    bool debug(){
		synchronized(debugThreadLock){
        
			if (_debugThread != nilptr){
				_debugThread.start();
                return true;
            }
        }
        return false;
    }
    
    void setStackView(XStackInfor view){
		stackWnd = view;
    }
        
    void doOpen(){
		String file = QXFileDialog.getOpenFileName("打开文件", nilptr,  "X Project(*.xprj);;X Souerces Module(*.xcs *.xcsm)", this);
		if (file != nilptr && file.length() > 0){
			String exts = file.findExtension();
			
			if (exts == nilptr || exts.equals(".xprj") == false){
				openTextFile(file);
			}else{
				loadProject(file);
			}
			updateDocumentStatus();
		}
    }
    
    bool createProject(){
        /*Project project = new Project();
        project.createProject("helloworld");*/
        
        QXDialog newDlg = new QXDialog();
        if (newDlg.load("ui/newproj.ui") == false){
            return false;
        }
        WizardDialog wizard = new WizardDialog(this);	
        wizard.attach(newDlg);
        return true;
    }
    
    QXWidget currentSubWindow()override{
		QXWidget win = super.currentSubWindow();
        if (win == indexPage || win == nilptr){
			return nilptr;
        }
        return win;
    }
    
    void saveFile(){
		try{
			XSourceEditor wnd = (XSourceEditor)currentSubWindow();
			if (wnd != nilptr){
				wnd.saveFile();
			}
        }catch(Exception e){
        
        }
    }
    
	void saveFileAs(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.saveFileAs();
        }
	}
    void saveProject(){
        currentProject.save();
    }
    
	void updateDocumentStatus(){
		Object win = currentSubWindow();
		XMenuManager.setDocumentOpened(win != nilptr && win != indexPage);
	}
	bool isCurrentProjectEmpty(){
		return currentProject == nilptr;
	}
	String currentProjectName(){
		if (currentProject != nilptr){
			return currentProject.getName();
		}
		return nilptr;
	}
	String currentProjectDir(){
		if (currentProject != nilptr){
			return currentProject.getProjectDir();
		}
		return nilptr;
	}
	bool closeProject(){
		if (currentProject != nilptr){
			if (currentProject.intelliSense != nilptr){
				currentProject.intelliSense.close();
			}	
            
			for (int i =0; i < currentProject.getSourceFileCount(); i++){
				closeFor(currentProject.getSourcePath(i));
			}
            
			if (isDebugging()){
				int rt = QXMessageBox.Question("注意", "调试器正在运行, 是否关闭调试器并退出?", QXMessageBox.Ok | QXMessageBox.Cancel, QXMessageBox.Cancel);
				if (rt == QXMessageBox.Cancel){
					return false;
				}
			}
            
            stopRun();
            
			slnView.clear();
			_builder.clear(false);
			XWndClass.wndClass.clear();
            currentProject.xintelliSenseMap = nilptr;
            currentProject.root = nilptr;
			currentProject = nilptr;
			mainWindow.setWindowTitle("XIDE");
			XMenuManager.setProjectLoaded(false);

			
            return true;
		}else{
			QXMessageBox.Critical("注意", "当前工作空间没有打开一个项目", QXMessageBox.Ok, QXMessageBox.Ok);
		}
        return true;
	}
    
    bool showAllWindows(){
        QXDialog newDlg = new QXDialog();
        if (newDlg.load("ui/Windows.ui") == false){
            return false;
        }
        Windows winlist = new Windows();
		winlist._workspace = this;
        winlist.attach(newDlg);
		
        return true;
    }
    
    void saveAllFile(){
        if (currentProject != nilptr){
            for (int i =0, c = currentProject.getSourceFileCount(); i < c; i++){
                String file = currentProject.getSourcePath(i);
                XSourceEditor.findSaveFile(file);
            }
        }
    }
    void build(){
        if (currentProject != nilptr){
            saveAllFile();
            currentProject.build(_builder);
        }
    }
    void setMainWindow(QXMainWindow w){
        mainWindow = w;
    }
    void toggleBreakpoint(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.toggleBreakpoint();
        }
    }
    void UnDo(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.UnDo();
        }
    }
    
    void ReDo(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.ReDo();
        }
    }
    
    void Copy(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.Copy();
        }
    }
    
    void Paste(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.Paste();
        }
    }
    
    void Cut(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.Cut();
        }
    }
    
    void Delete(){
        XSourceEditor wnd = (XSourceEditor)currentSubWindow();
        if (wnd != nilptr){
            wnd.Delete();
        }
    }
    
	Project getCurrentProject(){
		return currentProject;
	}
	void findAgain(){
    	if (XFindDlg.bFindAll == false){
			XSourceEditor wnd = (XSourceEditor)currentSubWindow();
			if (wnd != nilptr){
				wnd.findAgain();
			}
        }else{
			XFindresWnd.findWnd.nextFind();
        }
	}
    
    void gotoLine(){        
        InputDialog.requestInput(new InputDialog.onInputListener(){
			bool onInputOk(String text)override{
                if (text.length() == 0 || text.isDigit() == false){
					QXMessageBox.Critical("错误", "输入了不正确的行号", QXMessageBox.Ok, QXMessageBox.Ok);
                    return false;
                }
                int line = text.parseInt();
                XSourceEditor wnd = (XSourceEditor)XWorkspace.this.currentSubWindow();
                
                if (wnd == nilptr){
                    QXMessageBox.Critical("提示", "当前没有正在编辑的文件", QXMessageBox.Ok, QXMessageBox.Ok);
                    return true;
                }
                
                wnd.goto(line - 1, 1);
                return true;
            }
			bool onInputCancel()override{
				return true;
            }
			String getTitle()override{
				return "转到行";
            }
			String getTips()override{
				return "输入行号:";
            }
			String getDefault()override{
				return "0";
            }
		});
    }
    
    void FindReplace(){
		if (findDlg == nilptr){
			QXDialog newDlg = new QXDialog();
			if (newDlg.load("ui/findreplace.ui", mainWindow) == false){
					return ;
			}
			findDlg = new XFindDlg(this);
			findDlg.attach(newDlg);
		}
		XSourceEditor wnd = (XSourceEditor)currentSubWindow();
		if (wnd != nilptr){
			String text = wnd.getSelectedText();
			findDlg.setDefaultFindText(text);
		}
		findDlg.setActive(true);
		return ;
    }

	void stopRun(){
		synchronized(runThreadLock){
			if (_run_thread != nilptr){
				XWorkspace.this.currentProject.stopRun();
			}
		}
	}
    
    void savesaTempWithDescr(String tempName){
		if (currentProject != nilptr){
			InputDialog.requestInput(new InputDialog.onInputListener(){
				bool onInputOk(String text)override{
					currentProject.saveAsTemplate(tempName, text);
					return true;
				}
				bool onInputCancel()override{
					return true;
				}
				String getTitle()override{
					return "输入";
				}
				String getTips()override{
					return "输入模板描述:";
				}
				String getDefault()override{
					return currentProject.getName();
				}
			});    
        }
    }
    
    void saveProjectAsTemplate(){
    
		if (currentProject != nilptr){
			InputDialog.requestInput(new InputDialog.onInputListener(){
				bool onInputOk(String text)override{
					if (text == nilptr || text.length() == 0){
						QXMessageBox.Critical("错误", "项目名称不合法", QXMessageBox.Ok, QXMessageBox.Ok);
						return false;
					}
					savesaTempWithDescr(text);
					return true;
				}
				bool onInputCancel()override{
					return true;
				}
				String getTitle()override{
					return "输入";
				}
				String getTips()override{
					return "输入模板名称:";
				}
				String getDefault()override{
					return currentProject.getName();
				}
			});    
        }
    }
    
    void debugRun(){
		synchronized(runThreadLock){
			if (_run_thread == nilptr){
				if (currentProject != nilptr){
					_run_thread = new Thread(){
						void run(){
							XWorkspace.this.currentProject.debugRun(XWorkspace.this._builder);
							XWorkspace.this._run_thread = nilptr;
						}
					};
					_run_thread.start();
				}
			}else{
				debuggee.continuerun(ThreadManager.currentThreadId);
            }
		}
    }
    
    void Run(){
		synchronized(runThreadLock){
			if (_run_thread == nilptr){
				if (currentProject != nilptr){
					_run_thread = new Thread(){
						void run(){
							XWorkspace.this.currentProject.Run(XWorkspace.this._builder);
							XWorkspace.this._run_thread = nilptr;
						}
					};
					_run_thread.start();
				}
			}
		}
    }
    
    static const int NOTIFY_DEBUG_START = 0x100;
    static const int NOTIFY_DEBUG_STOP = 0x101;
    static const int NOTIFY_DEBUG_ENABLECONTROL = 0x102;
    static const int NOTIFY_DEBUG_DISABLECONTROL = 0x103;
    static const int NOTIFY_DEBUG_NOTSUPPORT = 0x104;
    
    static void setNofity(long cmd){
		workspace.Notify(cmd);
    }
    
    void refreshDebugControl(bool bp){
		setNofity(bp ? NOTIFY_DEBUG_ENABLECONTROL : NOTIFY_DEBUG_DISABLECONTROL);
    }
    
    void notSupportDebug(){
		setNofity(NOTIFY_DEBUG_NOTSUPPORT);
    }
    void setDebugControlEnable(bool bp){
		XMenuManager.refreshDebugControl(bp);
    }
    static void updateDebugStatus(bool start){
		setNofity(start ? NOTIFY_DEBUG_START : NOTIFY_DEBUG_STOP);
    }
    
    
	void onNotification(long id){
		switch(id){
			case NOTIFY_DEBUG_START:
				XMenuManager.refreshDebugMenu(true);
                
            break;
            
            case NOTIFY_DEBUG_STOP:
				XMenuManager.refreshDebugMenu(false);
                AutoWnd.clear();
                XStackInfor.reset();
            break;
            
            case NOTIFY_DEBUG_ENABLECONTROL:
				setDebugControlEnable(true);
            break;
            
            case NOTIFY_DEBUG_DISABLECONTROL:
				setDebugControlEnable(false);
            break;
            
            case NOTIFY_DEBUG_NOTSUPPORT:
				QXMessageBox.Critical("注意", "目标程序不支持调试,请在[项目]->[属性]->[编译选项]中开启调试后重新编译", QXMessageBox.Ok, QXMessageBox.Ok);
            break;
        }
	}
    
	bool XIntelliSense(XSourceEditor editor, String originalName,String content,long position){
		
			QxApp.statusBar.statusBar.showMessage("正在运行 XIntelliSense...");
			synchronized(xintellisencelock){
				if (_autoComp_thread == nilptr){
					_autoComp_thread = new Thread(){
						void run()override{
							XWorkspace.this.autocomp = XWorkspace.this.getXIntelliSense(originalName, content, position);
							editor.Notify(AUTODOMPEVENTID);
							XWorkspace.this._autoComp_thread = nilptr;
						}
					};
					_autoComp_thread.start();
					return true;
				}
			}
			QxApp.statusBar.statusBar.showMessage("XIntelliSense 失败");
			return false;
		
	}
    
    void addObject(int id){
		if (id == 0){
			String file = QXFileDialog.getOpenFileName("添加已有文件", nilptr,  "X Souerces Module(*.xcs *.xcsm)", this);
			if (file != nilptr && file.length() > 0){
				file = String.formatPath(file, false);
				if (currentProject.addSource(file)){
					openTextFile(file);
                }
            }        
        }else{
			AddObjectDlg.requestAddObject(currentProject, id);
        }
    }
    
    bool XIntelliSenseL(XSourceEditor editor, String originalName,int line){
		QxApp.statusBar.statusBar.showMessage("正在运行 XIntelliSense...");
		synchronized(xintellisencelock){
			if (_autoComp_thread == nilptr){
				_autoComp_thread = new Thread(){
					void run()override{
						XWorkspace.this.autocomp = XWorkspace.this.getXIntelliSenseL(originalName, line);
						editor.Notify(AUTODOMPEVENTID);
						XWorkspace.this._autoComp_thread = nilptr;
					}
				};
				_autoComp_thread.start();
				return true;
			}
		}
		QxApp.statusBar.statusBar.showMessage("XIntelliSense 失败");
		return false;
	}
    
	bool XIntelliSense(){
		if (currentProject != nilptr){
			QxApp.statusBar.statusBar.showMessage("正在运行 XIntelliSense...");
			synchronized(xintellisencelock){
				if (_autoComp_thread == nilptr){
					_autoComp_thread = new Thread(){
						void run()override{
							if (XWorkspace.this.currentProject != nilptr){
								XWorkspace.this.currentProject.updateXintelliSense();
								XWndClass.postNotify(AUTODOMPEVENTID);
							}
							XWorkspace.this._autoComp_thread = nilptr;
						}
					};
					_autoComp_thread.start();
					return true;
				}
			}
			QxApp.statusBar.statusBar.showMessage("XIntelliSense 失败");
		}
		return false;
	}
    
    bool UpdateIntelliSense(String originalName, String content){
		if (currentProject != nilptr){
			currentProject.intelliSense.update(originalName, content);
            XIntelliSense();
        }
        return true;
    }
    
	XIntelliSense.XIntelliResult [] getXIntelliSense(String sourcePath,String content,long position){
		if (currentProject != nilptr){
			if (currentProject.intelliSense != nilptr){
				for (int i = 0; i < currentProject.getSourceFileCount(); i++){
					String _sourcePath = currentProject.getSourcePath(i);
					if (_sourcePath.equals(sourcePath) == false){
						XSourceEditor wnd = XSourceEditor.findFileWindow(_sourcePath);
						if (wnd != nilptr){
							String _content = wnd.getTextContent();
							currentProject.intelliSense.update(_sourcePath, _content);
						}
					}	
				}
				return currentProject.intelliSense.getIntelliSense(sourcePath, content, position);
			}
		}
		return nilptr;
	}
    
	XIntelliSense.XIntelliResult [] getXIntelliSenseL(String sourcePath,int line){
		if (currentProject != nilptr){
			if (currentProject.intelliSense != nilptr){
				return currentProject.intelliSense.getIntelliSenseL(sourcePath, line);
			}
		}
		return nilptr;
	}
};