//xlang Source, Name:QXPainter.xcsm 
//Date: Mon Oct 21:05:42 2018 

class QXPainter{

	long hpaint;
    
    static const int       
		/** @pen style
        
        */
		NoPen = 0,
        SolidLine = 1,
        DashLine = 2,
        DotLine = 3,
        DashDotLine = 4,
        DashDotDotLine = 5,
        CustomDashLine = 6,
        MPenStyle = 7,
        
        /** @bgm mode
        
        */
        TransparentMode = 0,
        OpaqueMode = 1,
        
		/** @brush style
        */
        NoBrush = 0,
        SolidPattern = 1,
        Dense1Pattern = 2,
        Dense2Pattern = 3,
        Dense3Pattern = 4,
        Dense4Pattern = 5,
        Dense5Pattern = 6,
        Dense6Pattern = 7,
        Dense7Pattern = 8,
        HorPattern = 9,
        VerPattern = 10,
        CrossPattern = 11,
        BDiagPattern = 12,
        FDiagPattern = 13,
        DiagCrossPattern = 14,
        LinearGradientPattern = 15,
        RadialGradientPattern = 16,
        ConicalGradientPattern = 17,
        TexturePattern = 24,
        
        /** @ImageConversionFlag
        */
        
		ColorMode_Mask          = 0x00000003,
        AutoColor               = 0x00000000,
        ColorOnly               = 0x00000003,
        MonoOnly                = 0x00000002,
        // Reserved             = 0x00000001,

        AlphaDither_Mask        = 0x0000000c,
        ThresholdAlphaDither    = 0x00000000,
        OrderedAlphaDither      = 0x00000004,
        DiffuseAlphaDither      = 0x00000008,
        NoAlpha                 = 0x0000000c, // Not supported

        Dither_Mask             = 0x00000030,
        DiffuseDither           = 0x00000000,
        OrderedDither           = 0x00000010,
        ThresholdDither         = 0x00000020,
        // ReservedDither       = 0x00000030,

        DitherMode_Mask         = 0x000000c0,
        AutoDither              = 0x00000000,
        PreferDither            = 0x00000040,
        AvoidDither             = 0x00000080,

        NoOpaqueDetection       = 0x00000100,
        NoFormatConversion      = 0x00000200;
        
	QXPainter(long handle){
		hpaint = handle;
    }
    
    void setPen(int color, int penStyle, double width){
		QXNative.widget_set_v2int_double_value(hpaint, QXCore.SETPEN, color, penStyle, width);
    }
    
    void setBrush(int color, int brushStyle){
		QXNative.widget_set_v2int_value(hpaint, QXCore.SETBRUSH, color, brushStyle);
    }
    
    void drawLine(int start_x, int start_y, int end_x, int end_y){
		QXNative.native_int4(hpaint, QXCore.QXPAINTDRAWLINE, start_x, start_y, end_x, end_y);
    }
    
    void drawRect(int x, int y, int w, int h){
		QXNative.native_int4(hpaint, QXCore.QXPAINTDRAWRECT, x, y, w, h);
    }
    
    void drawRect(QXRect r){
		QXNative.native_int4(hpaint, QXCore.QXPAINTDRAWRECT, r.left, r.top, r.width(), r.height());
    }
    
    void fillRect(int x,int y, int w,int h, int color, int brushStyle){
		QXNative.long_long_int9(hpaint, QXCore.FILLRECT, 0, x, y, w, h, color, brushStyle, 0, 0, 0);
    }
    
    void save(){
		QXNative.widget_slot(hpaint, QXCore.PAINTERSAVE);
    }
    
    void restore(){
		QXNative.widget_slot(hpaint, QXCore.PAINTERRESTORE);
    }
    
    void resetMatrix(){
		QXNative.widget_slot(hpaint, QXCore.PAINTRESETMATRIX);
    }
    
    QXMatrix getMatrix(){
		return new QXMatrix(QXNative.long_get(hpaint, QXCore.PAINTERGETMATRIX));
    }
    
    void setMatrix(QXMatrix m){
		QXNative.widget_set_native_value(hpaint, QXCore.PAINTSETMATRIX, m.nativehandle);
    }
    
    void resetTransform(){
		QXNative.widget_slot(hpaint, QXCore.PAINTRESETTRANSFORM);
    }
    
    void drawText(String text, int x,int y){
		QXNative.widget_set_intintstring_value(hpaint, QXCore.DRAWTEXT, x, y ,text);
    }
    
    void fillRect(QXRect r, int color, int brushStyle){
		QXNative.long_long_int9(hpaint, QXCore.FILLRECT, 0, r.left, r.top, r.width(), r.height(), color, brushStyle, 0, 0, 0);
    }
    
    void drawLines(int [] points){
		if ((points.length & 1) == 1 || points.length < 4){
			throw new IllegalArgumentException("points length must be Even numbers");
        }
		QXNative.array_int2(hpaint, QXCore.QXPAINTDRAWLINE, points, 0, 0);
    }
    
    void setBackgroundBrush(int color, int brushStyle){
		QXNative.widget_set_v2int_value(hpaint, QXCore.SETBKBRUSH, color, brushStyle);
    }
    
    void setOpacity(double fopacity){
		QXNative.widget_set_double_value(hpaint, QXCore.QXPAINTOPACITY, fopacity);
    }
    
    void setBackMode(int mode){
		QXNative.widget_set_vint_value(hpaint, QXCore.QXPAINTBGMMODE, mode);
    }
    
    void drawImage(QXImage image, QXRect dest, QXRect source, int converFlags){
		QXNative.long_long_int9(hpaint, QXCore.DRAWIMAGE, image.himage, 
			dest.left, dest.top, dest.right, dest.bottom, 
			source.left, source.top, source.right, source.bottom,  
			converFlags);
    }
    
    void drawImage(QXImage image, int x,int y){
		QXNative.widget_set_intlongint_value(hpaint, QXCore.DRAWIMAGE, image.himage,x, y);
    }
};