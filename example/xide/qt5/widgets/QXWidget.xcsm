
static class Runnable{
	void run();
};
    
class QXWidget : QXObject{
    //WindowType
    static const int Widget = 0x00000000;
	static const int Window = 0x00000001;
	static const int Dialog = 0x00000002 | Window;
	static const int Sheet = 0x00000004 | Window;
	static const int Drawer = Sheet | Dialog;
	static const int Popup = 0x00000008 | Window;
	static const int Tool = Popup | Dialog;
	static const int ToolTip = Popup | Sheet;
	static const int SplashScreen = ToolTip | Dialog;
	static const int Desktop = 0x00000010 | Window;
	static const int SubWindow = 0x00000012;
	static const int ForeignWindow = 0x00000020 | Window;
	static const int CoverWindow = 0x00000040 | Window;
	static const int WindowType_Mask = 0x000000ff;
	static const int MSWindowsFixedSizeDialogHint = 0x00000100;
	static const int MSWindowsOwnDC = 0x00000200;
	static const int BypassWindowManagerHint = 0x00000400;
	static const int X11BypassWindowManagerHint = BypassWindowManagerHint;
	static const int FramelessWindowHint = 0x00000800;
	static const int WindowTitleHint = 0x00001000;
	static const int WindowSystemMenuHint = 0x00002000;
	static const int WindowMinimizeButtonHint = 0x00004000;
	static const int WindowMaximizeButtonHint = 0x00008000;
	static const int WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint;
	static const int WindowContextHelpButtonHint = 0x00010000;
	static const int WindowShadeButtonHint = 0x00020000;
	static const int WindowStaysOnTopHint = 0x00040000;
	static const int WindowTransparentForInput = 0x00080000;
	static const int WindowOverridesSystemGestures = 0x00100000;
	static const int WindowDoesNotAcceptFocus = 0x00200000;
	static const int MaximizeUsingFullscreenGeometryHint = 0x00400000;
	static const int CustomizeWindowHint = 0x02000000;
	static const int WindowStaysOnBottomHint = 0x04000000;
	static const int WindowCloseButtonHint = 0x08000000;
	static const int MacWindowToolBarButtonHint = 0x10000000;
	static const int BypassGraphicsProxyWidget = 0x20000000;
	static const int NoDropShadowWindowHint = 0x40000000;
	static const int WindowFullscreenButtonHint = 0x80000000;
    static class QPoint{
		QPoint(int _x,int _y){
			x = _x;
            y = _y;
        }
        QPoint(long v){
			x = (v >> 32) & 0xffffffff;
            y = v & 0xffffffff;
        }
		int x;
        int y;
    };
    static const int  AlignLeft = 0x0001,
        AlignLeading = AlignLeft,
        AlignRight = 0x0002,
        AlignTrailing = AlignRight,
        AlignHCenter = 0x0004,
        AlignJustify = 0x0008,
        AlignAbsolute = 0x0010,
        AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,
        AlignTop = 0x0020,
        AlignBottom = 0x0040,
        AlignVCenter = 0x0080,
        AlignBaseline = 0x0100,
        // Note that 0x100 will clash with Qt::TextSingleLine = 0x100 due to what the comment above
        // this enum declaration states. However, since Qt::AlignBaseline is only used by layouts,
        // it doesn't make sense to pass Qt::AlignBaseline to QPainter::drawText(), so there
        // shouldn't really be any ambiguity between the two overlapping enum values.
        AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter | AlignBaseline,
        AlignCenter = AlignVCenter | AlignHCenter;
	static const int  Horizontal = 0x1,
        Vertical = 0x2;
	static const int  TopToBottom = 0, BottomToTop = 1;
    static const int 
	NoContextMenu = 0,
    DefaultContextMenu = 1,
    ActionsContextMenu = 2,
    CustomContextMenu = 3,
    PreventContextMenu = 4;
    QXWidget(){
    }
    

    
    static List<Runnable> _uiloop_list = new List<Runnable>();
    
    static const int NEW_UI_TASK_NID = 0xf00f00ff;
    
    void runOnUi(Runnable task){
		synchronized(_uiloop_list){
			_uiloop_list.add(task);
        }
        Notify(NEW_UI_TASK_NID);
    }
    

    final void onNotify(long eventid)override{
		if (eventid == NEW_UI_TASK_NID){
			while (_uiloop_list.size() > 0){
				Runnable r;
				synchronized(_uiloop_list){
					if (_uiloop_list.size() > 0){
						r = _uiloop_list.pollLast();
					}
				}
                if (r != nilptr){
					r.run();
                }
            }
        }else{
			onNotification(eventid);
        }
    }
    
    void onNotification(long eventid){
		if (_notifyListener != nilptr){
			_notifyListener.onNotify(this, eventid);
		}
    }
    
    QXWidget(long h){
        super(h);
    }
    
    bool create(){
        nativehandle = createQObject(QType.qtWidget, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    
    bool create(QXWidget parent){
        nativehandle = createQObject(QType.qtWidget, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    
    bool load(String uifile){
        nativehandle = locaUiFile(uifile, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    bool load(String uifile, QXWidget parent){
        nativehandle = locaUiFile(uifile, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    bool load(QXBuffer data){
        nativehandle = locaUiData(data.nativehandle, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    bool load(QXBuffer data, QXWidget parent){
        nativehandle = locaUiData(data.nativehandle, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    void setParent(QXWidget parent){
        widget_set_native_value(nativehandle, QXCore.PARENTWIDGET, parent.nativehandle);
    }
    
    double getOpacity(){
        return widget_get_double_value(nativehandle,QXCore.OPACITY);
    }
    
    void setModal(bool bm){
        widget_set_bool_value(nativehandle, QXCore.MODAL, bm);
    }
    
    bool isVisible(){
        return widget_get_bool_value(nativehandle, QXCore.VISIBLE);
    }
    
    bool maximized(){
        return widget_get_bool_value(nativehandle, QXCore.MAXIMIZED);
    }
    
    bool minimized(){
        return widget_get_bool_value(nativehandle, QXCore.MINIMIZED);
    }
    
    bool isEnabled(){
        return widget_get_bool_value(nativehandle, QXCore.ENABLED);
    }
    
    bool isActive(){
        return widget_get_bool_value(nativehandle, QXCore.ACTIVED);
    }
        
        
    
    void setOpacity(double v){
        widget_set_double_value(nativehandle,QXCore.OPACITY, v);
    }
    
    void setVisible(bool v){
        widget_set_bool_value(nativehandle, QXCore.VISIBLE, v);
    }
    
    void setMaximized(bool v){
        widget_set_bool_value(nativehandle, QXCore.MAXIMIZED, v);
    }
    
    void setMinimized(bool v){
        widget_set_bool_value(nativehandle, QXCore.MINIMIZED, v);
    }
    
    void setEnabled(bool v){
        widget_set_bool_value(nativehandle, QXCore.ENABLED, v);
    }
    
    void setActive(bool v){
        widget_set_bool_value(nativehandle, QXCore.ACTIVED, v);
    }
       
       
       
    int getMinimumHeight(){
        return widget_get_int_value(nativehandle, QXCore.MINIMUMHEIGHT);
    }
    
    int getMaximumHeight(){
        return widget_get_int_value(nativehandle, QXCore.MAXIMUMHEIGHT);
    }
    
    int getMinimumWidth(){
        return widget_get_int_value(nativehandle, QXCore.MINIMUMWIDTH);
    }
    
    int getMaximumWidth(){
        return widget_get_int_value(nativehandle, QXCore.MAXIMUMWIDTH);
    }
    
    int x(){
        return widget_get_int_value(nativehandle, QXCore.X_POS);
    }
    
    int y(){
        return widget_get_int_value(nativehandle, QXCore.Y_POS);
    }
    
    int width(){
        return widget_get_int_value(nativehandle, QXCore.WIDTH);
    }
    
    int height(){
        return widget_get_int_value(nativehandle, QXCore.HEIGHT);
    }
    
    bool isFullScreen(){
        return widget_get_bool_value(nativehandle, QXCore.FULLSCREEN);
    }
    
    bool isHidden(){
        return widget_get_bool_value(nativehandle, QXCore.HIDDEN);
    }
    
    bool isModal(){
        return widget_get_bool_value(nativehandle, QXCore.MODAL);
    }
    
    bool isWindow(){
        return widget_get_bool_value(nativehandle, QXCore.WINDOW);
    }
    
    void resize(int w,int h){
        widget_set_v2int_value(nativehandle, QXCore.RESIZE, w, h);
    }
    
    void scroll(int dx,int dy){
        widget_set_v2int_value(nativehandle, QXCore.SCROLL, dx, dy);
    }
        
    void setBackgroundRole(int role){
        widget_set_bkrl(nativehandle, role);
    }
    
    void setCursor(){
    
    }
    
    void move(int x,int y){
        widget_set_v2int_value(nativehandle, QXCore.MOVE, x, y);
    }
    
    void setFixedHeight(int h){
        widget_set_vint_value(nativehandle, QXCore.FIXEDHEIGHT, h);
    }
    
    void setWindowFlags(int flag/*WindowType*/){
        widget_set_vint_value(nativehandle, QXCore.WINDOWFLAG, flag);
    }
    
    void setWindowFlag(int flag/*WindowType*/, bool bOn){
        widget_set_int_bool_value(nativehandle, QXCore.SETWINDOWFLAG, flag, bOn);
    }
    
    void addAction(QXAction action){
		widget_set_native_value(nativehandle, ADDDEFACTION, action.nativehandle);
	}
	void addActions(QXAction []actions){
		long [] al = new long[actions.length];
		for (int i =0; i < al.length; i ++){
			al[i] = actions[i].nativehandle;
		}
		widget_set_object_value(nativehandle, ADDDEFACTION, al);
	}
	
	void setWindowIcon(String icon){
		widget_slot_string(nativehandle, QXCore.WINDOWICON, icon);
	}
	void setContextMenuPolicy(int v){
		widget_set_vint_value(nativehandle, SETCONTEXTMENUPOLICY, v);
	}
    void setFixedSize(int w, int h){
        widget_set_v2int_value(nativehandle, QXCore.FIXEDSIZE, w, h);
    }
    
    void setFixedWidth(int w){
        widget_set_vint_value(nativehandle, QXCore.FIXEDWIDTH, w);
    }
    void 
    setPalette(QXPalette palette){
        widget_set_native_value(nativehandle, QXCore.PALETTE, palette.nativehandle);
    }
    void 
    setStyle(QXStyle style){
        widget_set_native_value(nativehandle, QXCore.STYLE, style.nativehandle);
    }
    
    //virtual 
    void close(){
        widget_slot(nativehandle, QXCore.CLOSE);
    }
    void hide(){
        widget_slot(nativehandle, QXCore.HIDE);
    }
    void lower(){
        widget_slot(nativehandle, QXCore.LOWER);
    }
    void raise(){
        widget_slot(nativehandle, QXCore.RAISE);
    }
    void repaint(){
        widget_slot(nativehandle, QXCore.REPAINT);
    }
    void update(){
        widget_slot(nativehandle, QXCore.UPDATE);
    }
    void setFocus(){
        widget_slot(nativehandle, QXCore.SETFOCUS);
    }
    
    void 
    setWindowTitle(String text){
        widget_slot_string(nativehandle, QXCore.WINDOWTITLE, text);
    }
    
    void 
    show(){
        widget_slot(nativehandle, QXCore.SHOW);
    }
    void 
    showFullScreen(){
        widget_slot(nativehandle, QXCore.SHOWFULLSCREEN);
    }
    void 
    showMaximized(){
        widget_slot(nativehandle, QXCore.SHOWMAX);
    }
    void 
    showMinimized(){
        widget_slot(nativehandle, QXCore.SHOWMIN);
    }
    void 
    showNormal(){
        widget_slot(nativehandle, QXCore.SHOWNORMAL);
    }
    int Critical(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXERR, caption, text, button, defaultBtn);
    }
    int Warning(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXWAR, caption, text, button, defaultBtn);
    }
    
    int Question(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXQUE, caption, text, button, defaultBtn);
    }
    int Information(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXINF, caption, text, button, defaultBtn);
    }
    
    void About(String caption, String text){
        long_string2_int2(nativehandle, MESSAGEBOXABT, caption, text, 0, 0);
    }
    
    QPoint mapTo(QXWidget w, int x,int y){
		long v = x;
        v = (v << 32) | y;
		v = long_intlong2(nativehandle, MAPPOINT, w.nativehandle, v);
        return new QPoint(v);
    }
    QPoint mapToGlobal(int x,int y){
		long v = x;
        v = (v << 32) | y;
		v = long_intlong2(nativehandle, MAPPOINT, 0, v);
        return new QPoint(v);
    }
    QPoint mapFromGlobal(int x,int y){
		long v = x;
        v = (v << 32) | y;
		v = long_intlong2(0, MAPPOINT, nativehandle, v);
        return new QPoint(v);
    }
};