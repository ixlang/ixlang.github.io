
class Builder : IBuilder
{
    static XWndOutput output;
    static XWndInfor infownd;

    bool inConsole = false;
    Process buildProcess;


    Builder()
    {
    }
    Builder(bool bcon)
    {
        inConsole = bcon;
    }
    static void clear(bool focus)
    {
        if (output != nilptr) {
            output.clear(focus);
            infownd.clear();
        }
    }

    String build(String compilerPath, String []args, String workDir)override
    {
        String allInfo = nilptr;

        if (buildProcess == nilptr) {
            allInfo = "";
            String fullCommand = "";
            for (int i =0; i < args.length; i++) {
                fullCommand = fullCommand + (args[i] + " ");
            }

            OutputText(XPlatform.converPlatformCharSetTo(fullCommand) + "\n");

            buildProcess = new Process(XPlatform.converToPlatformCharSet(compilerPath), args);

            buildProcess.setWorkDirectory(XPlatform.converToPlatformCharSet(workDir));

            try {
                if (buildProcess.create(false, true, false, false)) {
                    String lines = "";
                    try {
                        int rd = 0;
                        byte [] buffer = new byte[1024];

                        while ((rd = buildProcess.read(buffer, 0, 1024)) > 0) {
                            String rdinfo = new String(buffer, 0, rd);

                            lines = lines + rdinfo;
                            allInfo = allInfo + rdinfo;

                            int lf = -1;
                            if ((lf = lines.lastIndexOf('\n')) != -1) {
                                String szOut = lines.substring(0, lf + 1);

                                if (lf + 1 < lines.length()) {
                                    lines = lines.substring(lf + 1, lines.length());
                                } else {
                                    lines ="";
                                }

                                OutputText(XPlatform.converPlatformCharSetTo(szOut));
                            }
                        }

                    } catch(Exception e) {

                    }
                    OutputText(XPlatform.converPlatformCharSetTo(lines));
                }
            } catch(Exception e) {
                String str = e.getMessage();
                if (_system_.getPlatformId() == 0) {
                    str = new String(str.getBytes(), "GB18030//IGNORE");
                    compilerPath = new String(compilerPath.getBytes(), "GB18030//IGNORE");
                }
                OutputText("运行编译器时发生错误:\n[" + compilerPath + "]" + str);
            }
            buildProcess = nilptr;
        }

        return XPlatform.converPlatformCharSetTo(allInfo);
    }

    void OutputText(String text)override
    {
        if (inConsole == false) {
            output.output(text);
        } else {
            _system_.consoleWrite(XPlatform.converToPlatformCharSet(text));
        }
    }
    void setCompileInfor(Vector<ICompileInfo> infos)override
    {
        if (inConsole == false) {
            infownd.showInfo(infos);
        }
    }
};