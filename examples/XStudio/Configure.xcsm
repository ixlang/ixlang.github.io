class Configure{
    String name;
    JsonObject root;
    bool bModified = false;
    
    Map<String, String> filemd5s = new Map<String, String>();
    
    Configure(){
    }
    
    String getCachedMd5(String path){
		String md5 = nilptr;
		try{
			md5 = filemd5s.get(path);
        }catch(Exception e){
			
        }
        
        if (md5 == nilptr){
			md5 = "";
        }
        return md5;
    }
    
    bool isModified(String srcpath){
		String md5 = getFileMd5(srcpath);
        String cached = getCachedMd5(srcpath);
        if (md5.equals(cached) == false){
			filemd5s.put(srcpath, md5);
            return true;
        }
        return false;
    }
    
    void resetCache(){
		filemd5s.clear();
    }
    
    static String getFileMd5(String file){
		
        String md5 = "unknow";
        
		FileInputStream fis =  nilptr;
        long hm = 0;
        try{
			fis = new FileInputStream(file);
            
            hm = Crypto.Md5Init();
            if (hm != 0){
				byte[] data = new byte[4096];
				
				long readed = 0;
				while ((readed = fis.read(data, 0, 4096)) > 0){
					Crypto.Md5Update(hm, data, 0, readed);
				}
				Crypto.MD5Final(hm);
                byte [] mv = Crypto.MD5Get(hm);
                
                md5 = "";
                for (int i =0; i < mv.length; i++){
					md5 = md5 + String.format("%02X",mv[i]);
                }
			}
        }catch(Exception e){
        
        }finally{
			if (fis != nilptr){
				fis.close();
            }
			if (hm != 0){
				Crypto.MD5Close(hm);
            }
        }
        
        if (md5 == nilptr || md5.length() == 0){
			md5 = "unknow";
        }
        
        return md5;
    }
    
    Configure(String _name, JsonObject _root){
        name = _name;
        root = _root;
    }
    
    void setOption(String key, String text){
        root.remove(key);
        root.put(key, text);
        bModified = true;
    }
    
    void save(){
		bModified = false;
    }
    
    bool isModified(){
		return bModified;
    }
    
    Configure clone(String newName){
		String txt = root.toString(false);
        JsonObject newobj = new JsonObject(txt);
        newobj.remove("name");
        newobj.put("name", newName);
        return new Configure(newName, newobj);
    }
    //----------------------------------------
    void setLibs(String text){
		String [] paths = text.split(';');
        JsonArray libpath = new JsonArray();
        for (int i = 0; i < paths.length; i++){
			if (paths[i].length() > 0){
				libpath.put(paths[i]);
            }
        }
        root.remove("libs");
        root.put("libs", libpath);
		bModified = true;
    }
    
    void setLinks(String text){
		String [] paths = text.split(';');
        JsonArray libpath = new JsonArray();
        for (int i = 0; i < paths.length; i++){
			if (paths[i].length() > 0){
				libpath.put(paths[i]);
            }
        }
        root.remove("links");
        root.put("links", libpath);
		bModified = true;
    }
    
    String getLibs(){        
        JsonArray libpath = (JsonArray)root.get("libs");
        if (libpath == nilptr){
			return "";
        }
        
        String out = "";
        for (int i = 0; i < libpath.length(); i++){
			String path = libpath.getString(i);
            if (path != nilptr && path.length() > 0){
				if (out.length() > 0){
					out = out + ";";
                }
				out = out + path;
            }
        }
        
        return out;
    }
    
    String getLinks(){        
        JsonArray libpath = (JsonArray)root.get("links");
        if (libpath == nilptr){
			return "";
        }
        
        String out = "";
        for (int i = 0; i < libpath.length(); i++){
			String path = libpath.getString(i);
            if (path != nilptr && path.length() > 0){
				if (out.length() > 0){
					out = out + ";";
                }
				out = out + path;
            }
        }
        
        return out;
    }
    
    //-------------------------------------------------------------------- 
    void setLibsPath(String text){
		String [] paths = text.split(';');
        JsonArray libpath = new JsonArray();
        
        for (int i = 0; i < paths.length; i++){
			if (paths[i].length() > 0){
				libpath.put(paths[i]);
            }
        }
        
        JsonObject pathObj = (JsonObject)root.get("path");
        if (pathObj == nilptr){
			pathObj = new JsonObject();
            root.put("path", pathObj);
        }
        pathObj.remove("libpath");
        pathObj.put("libpath", libpath);
        bModified = true;
    }
    
    bool addLib(String lib, String xpname, String xpver){
		bool isHas = false;
    
        JsonArray libs = (JsonArray)root.get("libs");
        
        if (libs == nilptr){
			libs = new JsonArray();
            root.put("libs", libs);
        }else{
			for (int i = 0; i < libs.length(); i++){
				String path = libs.getString(i);
				if (path != nilptr && path.length() > 0){
					if (path.equals(lib)){
						isHas = true;
						break;
					}else{
						String filename = path.findFilename();
						int pos = filename.lastIndexOf('_');
						if (pos != -1){
							String pname = filename.substring(0, pos);
                            if (pname.equals(xpname)){
								libs.remove(i);
                            }
                        }
                    }
				}
			}
        }
        
        if (isHas == false){
			libs.put(lib);
            bModified = true;
            return true;
        }
        return false;
    }
    
    bool addLink(String lib, String xpname, String xpver){
		bool isHas = false;
    
        JsonArray libs = (JsonArray)root.get("links");
        
        if (libs == nilptr){
			libs = new JsonArray();
            root.put("links", libs);
        }else{
			for (int i = 0; i < libs.length(); i++){
				String path = libs.getString(i);
				if (path != nilptr && path.length() > 0){
					if (path.equals(lib)){
						isHas = true;
						break;
					}else{
						String filename = path.findFilename();
						int pos = filename.lastIndexOf('_');
						if (pos != -1){
							String pname = filename.substring(0, pos);
                            if (pname.equals(xpname)){
								libs.remove(i);
                            }
                        }
                    }
				}
			}
        }
        
        if (isHas == false){
			libs.put(lib);
            bModified = true;
            return true;
        }
        return false;
    }
    
    bool addPathToLibpath(String path){
		JsonObject pathObj = (JsonObject)root.get("path");
        
        if (pathObj == nilptr){
			pathObj = new JsonObject();
            pathObj.put("path", path);
        }
        
        JsonArray libpath = (JsonArray)pathObj.get("libpath");
        if (libpath == nilptr){
			libpath = new JsonArray();
            pathObj.put("libpath", libpath);
        }
        
        bool isHas = false;
        for (int i = 0; i < libpath.length(); i++){
			if (libpath.getString(i).equals(path)){
				isHas = true;
                break;
            }
        }
        if (isHas == false){
			libpath.put(path);
            bModified = true;
            return true;
        }
        return false;
    }
    /*
    bool removeDepend(String xpname){
		JsonArray depends = (JsonArray)root.get("depends");
        if (depends == nilptr){
			depends = new JsonArray();
            root.put("depends", depends);
            return false;
        }
        
        for (int i = 0; i < depends.length(); i++){
			JsonObject depend = (JsonObject)depends.get(i);
            if (depend != nilptr){
				String pname = depend.getString("name");
                if (pname != nilptr && pname.equals(xpname)){
					depends.remove(i);
                    return true;
                }
            }
        }
        
        return false;
    }
    
    bool addDepends(String xpname, String version){        
        JsonArray depends = (JsonArray)root.get("depends");
        if (depends == nilptr){
			depends = new JsonArray();
            root.put("depends", depends);
        }
        
        JsonObject depend = new JsonObject();
        depend.put("name", xpname);
        depend.put("version", version);
		depends.put(depend);
        return true;
    }
    */
    int getArchId(){
		String [] archs = {"", "-arch:x86", "-arch:x86_64", "-arch:arm", "-arch:arm64", "-arch:mips"};
		String arch = getOption("wtype");
        
        int archid = _system_.getArchId();
        
        if (arch.length() > 0){
			for (int i = 0; i < archs.length; i++){
				if (archs[i].equals(arch)){
					archid = i;
					break;
				}
			}
        }
        return archid;
    }
    
    String getLibsPath(){
		
		JsonObject pathObj = (JsonObject)root.get("path");
        if (pathObj == nilptr){
			return "";
        }
        
        JsonArray libpath = (JsonArray)pathObj.get("libpath");
        if (libpath == nilptr){
			return "";
        }
        
        String out = "";
        for (int i = 0; i < libpath.length(); i++){
			String path = libpath.getString(i);
            if (path != nilptr && path.length() > 0){
				if (out.length() > 0){
					out = out + ";";
                }
				out = out + path;
            }
        }
        
        return out;
    }
    
    String getIncsPath(){
		JsonObject pathObj = (JsonObject)root.get("path");
        if (pathObj == nilptr){
			return "";
        }
        
        JsonArray libpath = (JsonArray)pathObj.get("incpath");
        if (libpath == nilptr){
			return "";
        }
        
        String out = "";
        for (int i = 0; i < libpath.length(); i++){
			String path = libpath.getString(i);
            if (path != nilptr && path.length() > 0){
				if (out.length() > 0){
					out = out + ";";
                }
				out = out + path;
            }
        }
        
        return out;
    }
        
    void setIncsPath(String text){
		String [] paths = text.split(';');
        JsonArray incpath = new JsonArray();
        for (int i = 0; i < paths.length; i++){
			if (paths[i].length() > 0){
				incpath.put(paths[i]);
			}
        }
        
        JsonObject pathObj = (JsonObject)root.get("path");
        if (pathObj == nilptr){
			pathObj = new JsonObject();
            root.put("path", pathObj);
        }
        pathObj.remove("incpath");
        pathObj.put("incpath", incpath);
        bModified = true;
    }
    
    String getOption(String key){
		String value = root.getString(key);
        if (value == nilptr){
			return "";
        }
        return value;
    }
    
    String getName(){
        return name;
    }
    
    bool createConfigure(String projName,JsonObject project, String configName){
        root = new JsonObject();
    
        name = configName;
        JsonObject paths = new JsonObject();
        paths.put("incpath", new JsonArray());
        paths.put("libpath", new JsonArray());
        root.put("paths", paths);
        
        //root.put("source", new JsonArray());
        
        root.put("libs", new JsonArray());
        root.put("links", new JsonArray());
        root.put("options", "");
        root.put("command", "-ce");
        root.put("outpath", "$(ProjectDir)/$(Arch)/$(Configure)");
        root.put("outname", "$(ProjectName)$(Ext)");
        
        project.put(name, root);
        
        return true;
    }
    
    
    /*bool deploy(Project project){
		PackageManager pm = new PackageManager();
		JsonArray depends = (JsonArray)root.get("depends");
        
        if (depends == nilptr){
			depends = new JsonArray();
            root.put("depends", depends);
            return false;
        }
        
        String deploy_path = getOption("deploypath");
        if (deploy_path == nilptr || deploy_path.length() == 0){
			XWndOutput.Output("部署路径错误,请先设置部署路径.");
            return false;
        }
		deploy_path = String.formatPath(XlangProjectProp.map_variable(project, this , deploy_path), false);
        if (deploy_path == nilptr || deploy_path.length() == 0){
			XWndOutput.Output("部署路径错误,请先设置部署路径.");
            return false;
        }
        for (int i = 0; i < depends.length(); i++){
			JsonObject depend = (JsonObject)depends.get(i);
            if (depend != nilptr){
				String pname = depend.getString("name");
                String pversion = depend.getString("version");
                
                PackageManager.PackageInfo pi = pm.findPackage(pname,pversion);
                
                if (pi != nilptr){
					if (false == deployPackage(deploy_path, project, pi)){
						XWndOutput.Output("部署包失败:" + pname + " ver:" + pversion);
                    }
                }else{
					XWndOutput.Output("找不到依赖包:" + pname + " ver:" + pversion);
                }
            }
        }
        
        return true;
    }
    
    
    bool deployPackage(String deploy_path, Project project,PackageManager.PackageInfo pi){
		bool rt = false;
        
        String match = String.formatPath("" + getArchId() + "/" + _system_.getPlatformId(), false);
        
		try{
			FileInputStream fis = new FileInputStream(pi.filepath);
			ZipArchive zs = new ZipArchive();
            
            
            if (zs.open(fis)){
				int c = zs.getEntriesCount();
                
				for (int i = 0; i < c; i ++){
					ZipEntry entry = zs.getEntry(i);
					String name =  String.formatPath(entry.getName(), false);
					if (name.startWith(match)){
						ZipFile zf = entry.getFile();
						if (zf != nilptr && zf.open()){
						
							String newpath = String.formatPath(deploy_path.appendPath(name.substring(3, name.length())), false);
							XWndOutput.Output(newpath + "...");
							XlangProjectProp.mkdirs(newpath.findVolumePath());
							
							FileOutputStream fos ;
							try{
								fos = new FileOutputStream(newpath);
								int rd = 0;
								byte [] data = new byte[1024];
								while ((rd = zf.read(data, 0, 1024)) > 0){
									fos.write(data, 0, rd);
								}
								rt = true;
							}catch(Exception e){
							
							}finally{
								if (fos != nilptr){
									fos.close();
								}
							}
							zf.close();
						}
					}
                }
				zs.close();
            }
            
            fis.close();
        }catch(Exception e){
        
        }
        
        return rt;
    }*/
    
     bool importPkg(Project project, PackageManager.PackageInfo pi, ZipArchive zs, String lixname, String xpname, String version){
		resetCache();
            
		if (addPathToLibpath("libs")){
			if (project.intelliSense != nilptr){
				project.intelliSense.appendLibpath("libs");
            }
        }
        
		if (addLib(lixname, xpname, version)){
			if (project.intelliSense != nilptr){
				project.intelliSense.appendLib(lixname);
            }
        }
        
        /*if (addLink(lixname, xpname, version)){
			if (project.intelliSense != nilptr){
				project.intelliSense.appendLink(lixname);
            }
        }*/
        
        bool rt = false;
        
        XWndOutput.Output("为 " + this.name + " 配置引用...\n");
        
		int c = zs.getEntriesCount();
		
		String out_path = getOption("outpath");
		out_path = String.formatPath(XlangProjectProp.map_variable(project, this , out_path), false);
		
		String match = String.formatPath("" + getArchId() + "/" + _system_.getPlatformId(), false);
		
        XWndOutput.Output("为 " + this.name + " 部署运行时文件...\n");
        
		for (int i = 0; i < c; i ++){
			ZipEntry entry = zs.getEntry(i);
			String name =  String.formatPath(entry.getName(), false);
			if (name.startWith(match)){
				ZipFile zf = entry.getFile();
                if (zf != nilptr && zf.open()){
                
					String newpath = String.formatPath(out_path.appendPath(name.substring(3, name.length())), false);
                    XWndOutput.Output(newpath + "...");
                    XlangProjectProp.mkdirs(newpath.findVolumePath());
                    
                    FileOutputStream fos ;
                    try{
						fos = new FileOutputStream(newpath);
						int rd = 0;
						byte [] data = new byte[1024];
						while ((rd = zf.read(data, 0, 1024)) > 0){
							fos.write(data, 0, rd);
						}
                        XWndOutput.Output("成功.\n");
                        rt = true;
                    }catch(Exception e){
                    
                    }finally{
						if (fos != nilptr){
							fos.close();
                        }
                    }
                    zf.close();
                }
			}
		}
        XWndOutput.Output("\n");
        return rt;
     }
};