//xlang Source, Name:ExportTool.xcsm 
//Date: Fri Dec 14:16:12 2018 

class ExportTool : QXDialog{

	QXLineEdit edtStaticLib ,nativefile, destfile, edtName, edtVersion, lelDescr, lblAuthor;
    QXComboBox cbbNative, cbbOs;
    QXPushButton stBrowser, nativeBrowser, btnEmpty, btnAdd , brwExport, btnExport, btnReadme, btnIcon, btnsave, btnload;
    QXTreeView  structView;
    QXProgressBar	prgExport;
    
    
    class FilePackage{
		int id;
		Vector<String> files = new Vector<String>();
        
        FilePackage(int i){
			id = i;
        }
        
        void preview(QXTreeView tree, long item){
        
			String [] oss = {"Windows", "Linux", "Macos", "其他"};
			long hroot = tree.insertItem(item, "res/toolbar/winoverlap.png", oss[id]);
            
            for (int i =0; i < files.size(); i++){
				tree.insertItem(hroot, "res/toolbar/source.png", files.get(i));
            }
            
        }
        
        bool build(ZipArchive zs, String path){
			String myPath = path.appendPath("" + id);
			//zs.createEntry(new ZipFile(myPath, nilptr, true, _system_.currentTimeMillis()));
            
            for (int i =0; i < files.size(); i++){
				String filename = files.get(i);
                
				if (false == zs.createEntry(new ZipFile(myPath.appendPath(filename.findFilenameAndExtension()), new FileInputStream(filename), false, _system_.currentTimeMillis()))){
					QXMessageBox.Critical("错误", "添加文件 " + filename + " 时发生错误", QXMessageBox.Ok, QXMessageBox.Ok);
					return false;
                }
            }
            return true;
        }
        
        JsonArray save(){
			JsonArray filesobj = new JsonArray();
            for (int i =0; i < files.size(); i++){
				filesobj.put(files.get(i));
            }
            return filesobj;
        }
        
        void load(String file){
			files.add(file);
        }
    };
    
    class Arch{
		int id;
        Map<int, FilePackage> osFile = new Map<int, FilePackage>();
        
        Arch(int ai){
			id = ai;
            for (int i =0; i < 4; i ++){
				osFile.put(i,new FilePackage(i));
            }
        }
        
        void preview(QXTreeView tree, long item){
			String [] options = {"default", "x86", "x86_64", "arm", "arm64", "mips"};
			long hroot = tree.insertItem(item, "res/toolbar/console.png", options[id]);
            Map.Iterator<int, FilePackage> iters = osFile.iterator();
            
            while (iters.hasNext()){
				iters.getValue().preview(tree, hroot);
				iters.next();
            }            
        }
        
        bool build(ZipArchive zs, String path){
			String myPath = path.appendPath("" + id);
			//zs.createEntry(new ZipFile(myPath, nilptr, true, _system_.currentTimeMillis()));
            
            Map.Iterator<int, FilePackage> iters = osFile.iterator();
            
            while (iters.hasNext()){
				if (iters.getValue().build(zs, myPath) == false){
					return false;
                }
				
                prgExport.setValue((id + 1) * 20 + (iters.getValue().id * 5));
                iters.next();
            }     
            return true;
        }
        
        JsonObject save(){
			JsonObject object = new JsonObject();
			Map.Iterator<int, FilePackage> iters = osFile.iterator();
            
            while (iters.hasNext()){
				JsonArray files = iters.getValue().save();
				
                object.put("" + iters.getKey(), files);
                iters.next();
            }     
            
            return object;
        }
        
        bool load(JsonObject objects){
			bool bsucc = true;
            
			JsonArray fileo = (JsonArray)objects.child();
            while (fileo != nilptr){
				String arcname = fileo.getName();
                int fid = arcname.parseInt();
                try{
					FilePackage ar = osFile.get(fid);
					for (int i = 0; i < fileo.length(); i++){
						ar.load(fileo.getString(i));
					}
                }catch(Exception e){
					bsucc = false;
				}
                fileo = (JsonArray)fileo.next();
            }
            return bsucc;
        }
    };
    
    class Package{
		String lixpath = "";
        String readme = "";
        String icon = "";
        String comment = "";
        
		Map<int, Arch> archs = new Map<int, Arch>();
        
        Package(){
			
        }
        
        void init(){
			for (int i =0; i < 5; i++){
				archs.put(i , new Arch(i));
            }
        }
        void reset(){
			archs.clear();
            init();
		}
        void setComment(String text){
			comment = text;
        }
        
        void preview(QXTreeView tree, long item){
			long hroot = tree.insertItem(item, "res/toolbar/staticfunction.png", lixpath);
            tree.insertItem(hroot, "res/toolbar/source.png", readme);
            
            Map.Iterator<int, Arch> iters = archs.iterator();
            
            while (iters.hasNext()){
				iters.getValue().preview(tree, hroot);
				iters.next();
            }
        }
        
        bool build(ZipArchive zs){
            if (lixpath.length() > 0){
				if (false == zs.createEntry(new ZipFile("major.lix", new FileInputStream(lixpath), false, _system_.currentTimeMillis()))){
					QXMessageBox.Critical("错误", "添加文件 " + lixpath + " 时发生错误", QXMessageBox.Ok, QXMessageBox.Ok);
					return false;
                }
            }
            
            if (readme.length() > 0){
				if (false == zs.createEntry(new ZipFile("readme.md", new FileInputStream(readme), false, _system_.currentTimeMillis()))){
					QXMessageBox.Critical("错误", "添加文件 " + readme + " 时发生错误", QXMessageBox.Ok, QXMessageBox.Ok);
					return false;
                }
            }
            
            if (icon.length() > 0){
				if (false == zs.createEntry(new ZipFile("icon.png", new FileInputStream(icon), false, _system_.currentTimeMillis()))){
					QXMessageBox.Critical("错误", "添加文件 " + icon + " 时发生错误", QXMessageBox.Ok, QXMessageBox.Ok);
					return false;
                }
            }
            
            Map.Iterator<int, Arch> iters = archs.iterator();
            

            while (iters.hasNext()){
				if (false == iters.getValue().build(zs, "")){
					return false;
                }
                prgExport.setValue((iters.getValue().id + 1) * 20);
				iters.next();
            } 
            return true;
        }
        
        JsonObject save(){
			JsonObject root = new JsonObject();
            root.put("lib",lixpath);
            root.put("md",readme);
            root.put("icon",icon);
            root.put("comment",comment);
            
            root.put("archs", saveArchs());
			return root;
        }
        
        JsonObject saveArchs(){
			JsonObject archobj = new JsonObject();
            
            Map.Iterator<int, Arch> iters = archs.iterator();
            
            while (iters.hasNext()){
				JsonObject archFiles = iters.getValue().save();
                archobj.put("" + iters.getKey(), archFiles);
				iters.next();
            }
            return archobj;
        }
        
        bool load(JsonObject root ){
			try{
				lixpath = root.getString("lib");
                readme = root.getString("md");
                icon = root.getString("icon");
                comment = root.getString("comment");
                
                return loadArchs((JsonObject)root.get("archs"));
            }catch(Exception e){
				
            }
            return false;
        }
        
        bool loadArchs(JsonObject objects){
			bool bsucc = true;
			JsonObject archo = (JsonObject)objects.child();
            while (archo != nilptr){
				String arcname = archo.getName();
                int id = arcname.parseInt();
                try{
					Arch ar = archs.get(id);
                    ar.load(archo);
                }catch(Exception e){
					bsucc = false;
                }
                archo = (JsonObject)archo.next();
            }
            return bsucc;
        }
    };
    
    Package currentPackage = new Package();
    
    class BrowserListener: onClickListener{
		QXLineEdit edit;
        String filter , title;
        bool save;
        
		BrowserListener(QXLineEdit _edit, bool _save, String _title, String _filter){
			edit = _edit;
            save = _save;
            filter = _filter;
            title = _title;
        }
        
		void onClick(QXObject,  bool checked)override{
			String file ;
			if (save == false){
				file = QXFileDialog.getOpenFileName(title, nilptr,  filter, ExportTool.this);
			}else{
				file = QXFileDialog.getSaveFileName(title, nilptr,  filter, ExportTool.this);
            }
            
			if (file != nilptr && file.length() > 0){
				edit.setText(file);
			}
		}
    };
    
	void onAttach()override{
    
		setFixedSize(width(), height());
        
		edtStaticLib = (QXLineEdit)attachByName(new QXLineEdit(), "edtStaticLib");
        nativefile = (QXLineEdit)attachByName(new QXLineEdit(), "nativefile");
        destfile = (QXLineEdit)attachByName(new QXLineEdit(), "destfile");
        
        edtName = (QXLineEdit)attachByName(new QXLineEdit(), "edtName");
        edtVersion = (QXLineEdit)attachByName(new QXLineEdit(), "edtVersion");
        lelDescr = (QXLineEdit)attachByName(new QXLineEdit(), "lelDescr");
        lblAuthor = (QXLineEdit)attachByName(new QXLineEdit(), "lblAuthor");
        
        cbbNative = (QXComboBox)attachByName(new QXComboBox(), "cbbNative");
        cbbOs = (QXComboBox)attachByName(new QXComboBox(), "cbbOs");
        btnsave = (QXPushButton)attachByName(new QXPushButton(), "btnsave");
        btnload = (QXPushButton)attachByName(new QXPushButton(), "btnload");
        btnIcon = (QXPushButton)attachByName(new QXPushButton(), "btnIcon");
        stBrowser = (QXPushButton)attachByName(new QXPushButton(), "stBrowser");
        nativeBrowser = (QXPushButton)attachByName(new QXPushButton(), "nativeBrowser");
        btnEmpty = (QXPushButton)attachByName(new QXPushButton(), "btnEmpty");
        btnAdd = (QXPushButton)attachByName(new QXPushButton(), "btnAdd");
        brwExport = (QXPushButton)attachByName(new QXPushButton(), "brwExport");
        btnExport = (QXPushButton)attachByName(new QXPushButton(), "btnExport");
        btnReadme = (QXPushButton)attachByName(new QXPushButton(), "btnReadme");
        structView = (QXTreeView)attachByName(new QXTreeView(), "structView");
        
        
        btnReadme.setOnMouseEventListener(new onMouseEventListener(){
        
			void onMouseMove(QXObject obj,int Button,int x,int y,int flags,int source)override{
				String md = currentPackage.readme;
                
                QPoint cpt = btnReadme.mapToGlobal(x,y);
                if (md != nilptr && md.length() > 0){
					btnReadme.showToolTips(cpt.x,cpt.y,md, -1);
                }else{
					btnReadme.showToolTips(cpt.x,cpt.y,"没有添加README文件", -1);
                }
			}
        });
        prgExport = (QXProgressBar)attachByName(new QXProgressBar(), "prgExport");
        
        stBrowser.setOnClickListener(new BrowserListener(edtStaticLib, false, "选择静态库", "X 静态链接库 (*.lix)"));
        nativeBrowser.setOnClickListener(new BrowserListener(nativefile, false, "选择Native文件", "Windows 动态链接库 (*.dll);;Unix/Linux 动态链接库文件 (*.so);;Darwin 动态链接库文件 (*.dylib);;所有文件 (*.*)"));
        
		brwExport.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				String file = QXFileDialog.getSaveFileName("导出文件", nilptr,  "X 包 (*.xp)", ExportTool.this);
				if (file != nilptr && file.length() > 0){
					String ext = file.findExtension();
                    
					if (ext == nilptr || (ext.equalsIgnoreCase(".xp") == false)){
						file = file + ".xp";
					}
					
					destfile.setText(file);
				}
            }                
        });

		btnsave.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				String file = QXFileDialog.getSaveFileName("保存", nilptr,  "X导出项目 (*.exp)", ExportTool.this);
				if (file != nilptr && file.length() > 0){
					currentPackage.lixpath = edtStaticLib.getText();
					JsonObject root = currentPackage.save();
                    
                    if (root != nilptr){
						root.put("package", edtName.getText());
						root.put("version", edtVersion.getText());
						root.put("descr", lelDescr.getText());
						root.put("author", lblAuthor.getText());
                        
                        String content = root.toString(true);
                        
						try{
							FileOutputStream fos = new FileOutputStream(file);
							byte [] data = content.getBytes();
							fos.write(data, 0, data.length);
							fos.close();
						}catch(Exception e){
							QXMessageBox.Critical("错误","未能保存",QXMessageBox.Ok,QXMessageBox.Ok);
						}
                    }
				}
            }
        });
        
        btnload.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				String file = QXFileDialog.getOpenFileName("载入", nilptr,  "X导出项目 (*.exp)", ExportTool.this);
				if (file != nilptr && file.length() > 0){
					try{
						FileInputStream fis = new FileInputStream(file);
						byte [] data = fis.read();
						fis.close();
						String content = new String(data);
						JsonObject root = new JsonObject(content);
                        currentPackage.reset();
                        
                        if (false == currentPackage.load(root)){
							QXMessageBox.Critical("注意","载入项目时有错误发生.",QXMessageBox.Ok,QXMessageBox.Ok);
                        }
                        
                        String packagename = root.getString("package");
                        String version = root.getString("version");
                        String descr = root.getString("descr");
                        String author = root.getString("author");
                        
                        if (packagename != nilptr){
							edtName.setText(packagename);
                        }
                        
                        if (version != nilptr){
							edtVersion.setText(version);
                        }
                        
                        if (descr != nilptr){
							lelDescr.setText(descr);
                        }
                        
                        if (author != nilptr){
							lblAuthor.setText(author);
                        }
                        if (currentPackage.icon != nilptr){
							btnIcon.setStyleSheetString("#btnIcon{border-image:url(\"" + currentPackage.icon + "\");}");
                        }else{
							btnIcon.setStyleSheetString("#btnIcon{border-image:url(\"" + "\");}");
                        }
                        
                        if (currentPackage.lixpath != nilptr){
							edtStaticLib.setText(currentPackage.lixpath);
                        }else{
							edtStaticLib.setText("");
                        }
                        
                        updatepreview();
					}catch(Exception e){
						QXMessageBox.Critical("错误","未能载入项目",QXMessageBox.Ok,QXMessageBox.Ok);
					}
				}
            }
        });
        
        btnIcon.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				String file = QXFileDialog.getOpenFileName("添加图标", nilptr,  "PNG图像 (*.png)", ExportTool.this);
				if (file != nilptr && file.length() > 0){
					currentPackage.icon = file;
                    btnIcon.setStyleSheetString("#btnIcon{border-image:url(\"" + file + "\");}");
				}
            }
        });
        
        btnReadme.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				String file = QXFileDialog.getOpenFileName("添加注释", nilptr,  "文本文件 (*.*)", ExportTool.this);
				if (file != nilptr && file.length() > 0){
					currentPackage.readme = file;
				}
            }
        });
        
        String [] options = {"x86", "x86_64", "arm", "arm64", "mips"};
        cbbNative.addItems(options);
        
        String [] oss = {"Windows", "Linux", "Macos", "其他"};
        cbbOs.addItems(oss);
        
        btnAdd.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				String add_path = nativefile.getText();
                if (add_path.length() == 0){
					QXMessageBox.Critical("错误", "没有选择一个文件", QXMessageBox.Ok, QXMessageBox.Ok);
                    return ;
                }
				int arch = cbbNative.getCurrentIndex() + 1;
                int os = cbbOs.getCurrentIndex();
                
                try{
					Vector<String > file = currentPackage.archs.get(arch).osFile.get(os).files;
                    
                    for (int i =0; i <file.size(); i++){
						if (file.get(i).equals(add_path)){
							return ;
                        }
                    }
					file.add(nativefile.getText());
                    updatepreview();
                }catch(Exception e){
					QXMessageBox.Critical("错误", "添加文件时发生错误", QXMessageBox.Ok, QXMessageBox.Ok);
                }
            }
        });
        
        btnEmpty.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				int arch = cbbNative.getCurrentIndex();
                int os = cbbOs.getCurrentIndex();
                
                try{
					currentPackage.archs.get(arch).osFile.get(os).files.clear();
                    updatepreview();
                }catch(Exception e){
					QXMessageBox.Critical("错误", "添加文件时发生错误", QXMessageBox.Ok, QXMessageBox.Ok);
                }
            }
        });
        
        
        btnExport.setOnClickListener(new onClickListener(){
			void onClick(QXObject obj, bool checked)override{
				onBuild();
            }
        });
        
        prgExport.setValue(0);
        
        String []columns = {"包内容"};
        structView.setColumns(columns);
        
        structView.setColumnWidth(0, 300);
        setWindowIcon("./res/toolbar/wizard.png");
    }

	void updatepreview(){
		structView.clear();
        
        long root = structView.addItem("res/toolbar/package.png", "Package");
        currentPackage.lixpath = edtStaticLib.getText();
        currentPackage.preview(structView, root);
    }
    
    
    void onBuild(){
		String outpath = destfile.getText();
        String descrtxt = lelDescr.getText();
        String author = lblAuthor.getText();
        
        currentPackage.lixpath = edtStaticLib.getText();
        
        String libname = edtName.getText();
        
        if (descrtxt.length() == 0){
			QXMessageBox.Critical("错误", "没有填写简要描述", QXMessageBox.Ok, QXMessageBox.Ok);
			return ;
        }
        
        if (libname.length() == 0){
			QXMessageBox.Critical("错误", "没有填写包名", QXMessageBox.Ok, QXMessageBox.Ok);
			return ;
        }
        
        if (Pattern.test(libname, "^[A-Za-z0-9_\.]+$", Pattern.NOTEMPTY, true) == false){
			QXMessageBox.Critical("错误", "包名不合法", QXMessageBox.Ok, QXMessageBox.Ok);
			return ;
		}
        
        String version = edtVersion.getText();
                                    
        if (currentPackage.lixpath.length() == 0){
			QXMessageBox.Critical("注意", "没有选择静态库文件", 	QXMessageBox.Ok, QXMessageBox.Ok);
            return ;
        }
        

        if (outpath.length() == 0){
			QXMessageBox.Critical("注意", "没有选择输出文件", 	QXMessageBox.Ok, QXMessageBox.Ok);
            return ;
        }
        
        try{
			FileOutputStream fos = new FileOutputStream(outpath);
			
			ZipArchive xp = new ZipArchive();
			
            JsonObject root = new JsonObject();
            
            root.put("package", libname);
            root.put("version", version);
            root.put("descr", descrtxt);
            root.put("author", author);
            String comment = root.toString(true);
            currentPackage.setComment(comment);
            xp.setComment(comment);
			if (xp.create(fos)){
				if (currentPackage.build(xp)){
					xp.close();
					QXMessageBox.Information("成功", "已成功导出:" + outpath, 	QXMessageBox.Ok, QXMessageBox.Ok);
                    close();
				}else{
					xp.close();
                    QXMessageBox.Critical("错误", "导出文件时发生错误", QXMessageBox.Ok, QXMessageBox.Ok);
                }
               
			}
        }catch(Exception e){
			QXMessageBox.Critical("注意", "未能导出", 	QXMessageBox.Ok, QXMessageBox.Ok);
		}
    }
    
	static bool Show(){
    
        QXDialog newDlg = new QXDialog();
        
        if (newDlg.load("ui/exportxp.ui") == false){
            return false;
        }
        
        ExportTool exportTool = new ExportTool();
        
        exportTool.attach(newDlg);
        exportTool.setModal(true);
        exportTool.show();
        return true;
    }
};