//xlang Source, Name:ThreadManager.xcsm 
//Date: Sun Sep 02:03:10 2018 

class ThreadManager{

	static Object threadLock = new Object();
    
    static int currentThreadId = 0;
    static int currentFrameId = 0;
    
    static const int XDBG_STATE_UPDATE	=	0;	//状态更新
	static const int XDBG_STATE_CREATE	=	1;	//线程创建
	static const int XDBG_STATE_EXIT		=	2;	//线程退出
	static const int XDBG_STATE_EXCEPTION = 	4;	//捕获异常
    static const int XDBG_STATE_REIGGEBP 	= 	8;	//触发断点
    
    static class StackFrame{
    
		int id;
		String source;
        int ip;
        int line;
        int row;
        
        StackFrame(int _id, JsonObject frame){
			id = id;
			source = frame.getString("source");
			ip = frame.getInt("ip");
			line = frame.getInt("line");
            row = frame.getInt("row");
        }
    };
    
    static class ThreadObject{
		int id;
        bool bInterrupt;
        String name;
        bool bException;
        
        StackFrame [] frames;       
        
        String except_name;
        String except_msg; 
        String except_addr;
        
        ThreadObject(JsonObject thread){
			parse(thread);
        }
        
        void parse(JsonObject thread){
			id = thread.getInt("id");
			name = thread.getString("name");
            if (name.length() == 0){
				name = "Thread:" + id;
            }
            bInterrupt = thread.getBool("interrupt");
            
            JsonObject exception = (JsonObject)thread.get("exception");
            
            bException = exception != nilptr;
            
            if (bException){
				parseException(exception);
            }
            
            if (bInterrupt){
				parseStack((JsonArray)thread.get("stack"));
            }
        }
        
        void parseException(JsonObject exception){
			except_name = exception.getString("name");
            except_msg = exception.getString("msg");
            except_addr = exception.getString("address");
        }
        
        void parseStack(JsonArray stacks){
			if (stacks != nilptr){
				int size = stacks.length();
				frames = new StackFrame[size];
				for (int i = 0; i < size; i ++){
					frames[i] = new StackFrame(i, (JsonObject)stacks.get(i));
				}
            }
        }
    };
    
    
    static Map<int, ThreadObject> thread_list = new Map<int, ThreadObject>();
    
    static void Update(JsonObject root, bool reset){
		synchronized(threadLock){
        
			if (reset){
				thread_list.clear();
            }
            
            JsonArray threads = (JsonArray)root.get("threads");
            int action = root.getInt("action");
            
            bool remove = false;
            
            if (action == XDBG_STATE_EXIT){
				remove = true;
            }

			int c = threads.length();
			for (int i = 0; i < c; i++){
				JsonObject thread = (JsonObject)threads.get(i);
                int tid = 0;
                
                if (remove){
					tid = thread.getInt("id");
					thread_list.remove(tid);
                }else{
					ThreadObject to = new ThreadObject(thread);
                    tid = to.id;
					thread_list.put(tid, to);
                }
                
                XStackInfor.updateThread(tid, action);
			}
        }
    }
    
    static bool isCurrentInterrupt(){
		bool bInterrupt = false;
		synchronized(threadLock){
			Map.Iterator<int,ThreadObject> iter = thread_list.find(currentThreadId);
			if (iter != nilptr){
				bInterrupt = iter.getValue().bInterrupt;
			}
		}
        return bInterrupt;
    }
    static void updateControlPane(int thread){
		bool bInterrupt = false;
		synchronized(threadLock){
			Map.Iterator<int,ThreadObject> iter = thread_list.find(thread);
			if (iter != nilptr){
				bInterrupt = iter.getValue().bInterrupt;
			}
		}
        XWorkspace.workspace.refreshDebugControl(bInterrupt);
    }
    
    static void setCurrentThread(int tid, int frame){

		synchronized(threadLock){
			currentThreadId = tid;
			currentFrameId = frame;
        }
        
        updateControlPane(tid);
		XWorkspace.workspace.debuggee.queryFrame(currentThreadId, currentFrameId);
    }
    
    static ThreadObject getThread(int tid){
		synchronized(threadLock){
			Map.Iterator<int, ThreadObject> iterator = thread_list.find(tid);
            if (iterator != nilptr){
				return iterator.getValue();
			}
        }
        return nilptr;
    }
};