//xlang Source, Name:QPrinter.xcsm 
//Date: Sat Aug 13:36:30 2019 
class QPrinter : QPagedPaintDevice{
    
    bool need_delloc = true;
    enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution };
    enum Orientation { Portrait, Landscape };
    enum PageOrder   { FirstPageFirst,
                       LastPageFirst };

    enum ColorMode   { GrayScale,
                       Color };

    enum PaperSource { OnlyOne,
                       Lower,
                       Middle,
                       Manual,
                       Envelope,
                       EnvelopeManual,
                       Auto,
                       Tractor,
                       SmallFormat,
                       LargeFormat,
                       LargeCapacity,
                       Cassette,
                       FormSource,
                       MaxPageSource, // Deprecated
                       CustomSource
    };

    enum PrinterState { Idle,
                        Active,
                        Aborted,
                        Error };

    enum OutputFormat { NativeFormat, PdfFormat };

    // Keep in sync with QAbstractPrintDialog::PrintRange
    enum PrintRange { AllPages, Selection, PageRange, CurrentPage };

    enum Unit {
        Millimeter,
        Point,
        Inch,
        Pica,
        Didot,
        Cicero,
        DevicePixel
    };

    enum DuplexMode {
        DuplexNone = 0,
        DuplexAuto,
        DuplexLongSide,
        DuplexShortSide
    };

    QPrinter(){
        nativehandle = createQPObject(QType.qtPrinter, this, 0, PrinterMode.ScreenResolution, 0, 0, 0);
        if (nativehandle == 0) {
            throw new IllegalArgumentException("can't new Object");
        }
    }
    
    QPrinter(long handle){
        need_delloc = false;
        nativehandle = handle;
    }
    
    QPrinter(PrinterMode mode){
        nativehandle = createQPObject(QType.qtPrinter, this, 0, mode, 0, 0, 0);
        if (nativehandle == 0) {
            throw new IllegalArgumentException("can't new Object");
        }
    }
    int devType() {
        return widget_get_int_value(nativehandle, PAINTERTYPE);
    }
    
    void setOutputFormat(OutputFormat format){
        widget_set_vint_value(nativehandle, PRINTERSETOUTFMT, format);
    }
    
    OutputFormat outputFormat() {
        return (OutputFormat)widget_get_int_value(nativehandle, PRINTERGETOUTFMT);
    }
    
    void finalize(){
        if (need_delloc){
            widget_slot(nativehandle, PRINTERDTOR);
        } 
    }
};