
static class Runnable{
	void run();
};
    
class QXWidget : QXObject{
    //WindowType
    static const int Widget = 0x00000000;
	static const int Window = 0x00000001;
	static const int Dialog = 0x00000002 | Window;
	static const int Sheet = 0x00000004 | Window;
	static const int Drawer = Sheet | Dialog;
	static const int Popup = 0x00000008 | Window;
	static const int Tool = Popup | Dialog;
	static const int ToolTip = Popup | Sheet;
	static const int SplashScreen = ToolTip | Dialog;
	static const int Desktop = 0x00000010 | Window;
	static const int SubWindow = 0x00000012;
	static const int ForeignWindow = 0x00000020 | Window;
	static const int CoverWindow = 0x00000040 | Window;
	static const int WindowType_Mask = 0x000000ff;
	static const int MSWindowsFixedSizeDialogHint = 0x00000100;
	static const int MSWindowsOwnDC = 0x00000200;
	static const int BypassWindowManagerHint = 0x00000400;
	static const int X11BypassWindowManagerHint = BypassWindowManagerHint;
	static const int FramelessWindowHint = 0x00000800;
	static const int WindowTitleHint = 0x00001000;
	static const int WindowSystemMenuHint = 0x00002000;
	static const int WindowMinimizeButtonHint = 0x00004000;
	static const int WindowMaximizeButtonHint = 0x00008000;
	static const int WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint;
	static const int WindowContextHelpButtonHint = 0x00010000;
	static const int WindowShadeButtonHint = 0x00020000;
	static const int WindowStaysOnTopHint = 0x00040000;
	static const int WindowTransparentForInput = 0x00080000;
	static const int WindowOverridesSystemGestures = 0x00100000;
	static const int WindowDoesNotAcceptFocus = 0x00200000;
	static const int MaximizeUsingFullscreenGeometryHint = 0x00400000;
	static const int CustomizeWindowHint = 0x02000000;
	static const int WindowStaysOnBottomHint = 0x04000000;
	static const int WindowCloseButtonHint = 0x08000000;
	static const int MacWindowToolBarButtonHint = 0x10000000;
	static const int BypassGraphicsProxyWidget = 0x20000000;
	static const int NoDropShadowWindowHint = 0x40000000;
	static const int WindowFullscreenButtonHint = 0x80000000;
    static class QPoint{
		QPoint(int _x,int _y){
			x = _x;
            y = _y;
        }
        QPoint(long v){
			x = (v >> 32) & 0xffffffff;
            y = v & 0xffffffff;
        }
		int x;
        int y;
    };
    static const int  AlignLeft = 0x0001,
        AlignLeading = AlignLeft,
        AlignRight = 0x0002,
        AlignTrailing = AlignRight,
        AlignHCenter = 0x0004,
        AlignJustify = 0x0008,
        AlignAbsolute = 0x0010,
        AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,
        AlignTop = 0x0020,
        AlignBottom = 0x0040,
        AlignVCenter = 0x0080,
        AlignBaseline = 0x0100,
        // Note that 0x100 will clash with Qt::TextSingleLine = 0x100 due to what the comment above
        // this enum declaration states. However, since Qt::AlignBaseline is only used by layouts,
        // it doesn't make sense to pass Qt::AlignBaseline to QPainter::drawText(), so there
        // shouldn't really be any ambiguity between the two overlapping enum values.
        AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter | AlignBaseline,
        AlignCenter = AlignVCenter | AlignHCenter;
	static const int  Horizontal = 0x1,
        Vertical = 0x2;
	static const int  TopToBottom = 0, BottomToTop = 1;
    static const int 
	NoContextMenu = 0,
    DefaultContextMenu = 1,
    ActionsContextMenu = 2,
    CustomContextMenu = 3,
    PreventContextMenu = 4;
    
    static const int 
        NoFocus = 0,
        TabFocus = 0x1,
        ClickFocus = 0x2,
        StrongFocus = TabFocus | ClickFocus | 0x8,
        WheelFocus = StrongFocus | 0x4;
        
    QXWidget(){
    }
    

    
    static List<Runnable> _uiloop_list = new List<Runnable>();
    
    static const int NEW_UI_TASK_NID = 0xf00f00ff;
    
    
    static const int   WA_Disabled = 0,
        WA_UnderMouse = 1,
        WA_MouseTracking = 2,
        WA_ContentsPropagated = 3, // ## deprecated
        WA_OpaquePaintEvent = 4,
        WA_NoBackground = WA_OpaquePaintEvent , // ## deprecated
        WA_StaticContents = 5,
        WA_LaidOut = 7,
        WA_PaintOnScreen = 8,
        WA_NoSystemBackground = 9,
        WA_UpdatesDisabled = 10,
        WA_Mapped = 11,
        WA_MacNoClickThrough = 12, // Mac only
        WA_InputMethodEnabled = 14,
        WA_WState_Visible = 15,
        WA_WState_Hidden = 16,

        WA_ForceDisabled = 32,
        WA_KeyCompression = 33,
        WA_PendingMoveEvent = 34,
        WA_PendingResizeEvent = 35,
        WA_SetPalette = 36,
        WA_SetFont = 37,
        WA_SetCursor = 38,
        WA_NoChildEventsFromChildren = 39,
        WA_WindowModified = 41,
        WA_Resized = 42,
        WA_Moved = 43,
        WA_PendingUpdate = 44,
        WA_InvalidSize = 45,
        WA_MacBrushedMetal = 46, // Mac only
        WA_MacMetalStyle = WA_MacBrushedMetal, // obsolete
        WA_CustomWhatsThis = 47,
        WA_LayoutOnEntireRect = 48,
        WA_OutsideWSRange = 49,
        WA_GrabbedShortcut = 50,
        WA_TransparentForMouseEvents = 51,
        WA_PaintUnclipped = 52,
        WA_SetWindowIcon = 53,
        WA_NoMouseReplay = 54,
        WA_DeleteOnClose = 55,
        WA_RightToLeft = 56,
        WA_SetLayoutDirection = 57,
        WA_NoChildEventsForParent = 58,
        WA_ForceUpdatesDisabled = 59,

        WA_WState_Created = 60,
        WA_WState_CompressKeys = 61,
        WA_WState_InPaintEvent = 62,
        WA_WState_Reparented = 63,
        WA_WState_ConfigPending = 64,
        WA_WState_Polished = 66,
        WA_WState_DND = 67, // ## deprecated
        WA_WState_OwnSizePolicy = 68,
        WA_WState_ExplicitShowHide = 69,

        WA_ShowModal = 70, // ## deprecated
        WA_MouseNoMask = 71,
        WA_GroupLeader = 72, // ## deprecated
        WA_NoMousePropagation = 73, // ## for now, might go away.
        WA_Hover = 74,
        WA_InputMethodTransparent = 75, // Don't reset IM when user clicks on this (for virtual keyboards on embedded)
        WA_QuitOnClose = 76,

        WA_KeyboardFocusChange = 77,

        WA_AcceptDrops = 78,
        WA_DropSiteRegistered = 79, // internal
        WA_ForceAcceptDrops = WA_DropSiteRegistered, // ## deprecated

        WA_WindowPropagation = 80,

        WA_NoX11EventCompression = 81,
        WA_TintedBackground = 82,
        WA_X11OpenGLOverlay = 83,
        WA_AlwaysShowToolTips = 84,
        WA_MacOpaqueSizeGrip = 85,
        WA_SetStyle = 86,

        WA_SetLocale = 87,
        WA_MacShowFocusRect = 88,

        WA_MacNormalSize = 89,  // Mac only
        WA_MacSmallSize = 90,   // Mac only
        WA_MacMiniSize = 91,    // Mac only

        WA_LayoutUsesWidgetRect = 92,
        WA_StyledBackground = 93, // internal
        WA_MSWindowsUseDirect3D = 94, // Win only
        WA_CanHostQMdiSubWindowTitleBar = 95, // Internal

        WA_MacAlwaysShowToolWindow = 96, // Mac only

        WA_StyleSheet = 97, // internal

        WA_ShowWithoutActivating = 98,

        WA_X11BypassTransientForHint = 99,

        WA_NativeWindow = 100,
        WA_DontCreateNativeAncestors = 101,

        WA_MacVariableSize = 102,    // Mac only

        WA_DontShowOnScreen = 103,

        // window types from http://standards.freedesktop.org/wm-spec/
        WA_X11NetWmWindowTypeDesktop = 104,
        WA_X11NetWmWindowTypeDock = 105,
        WA_X11NetWmWindowTypeToolBar = 106,
        WA_X11NetWmWindowTypeMenu = 107,
        WA_X11NetWmWindowTypeUtility = 108,
        WA_X11NetWmWindowTypeSplash = 109,
        WA_X11NetWmWindowTypeDialog = 110,
        WA_X11NetWmWindowTypeDropDownMenu = 111,
        WA_X11NetWmWindowTypePopupMenu = 112,
        WA_X11NetWmWindowTypeToolTip = 113,
        WA_X11NetWmWindowTypeNotification = 114,
        WA_X11NetWmWindowTypeCombo = 115,
        WA_X11NetWmWindowTypeDND = 116,

        WA_MacFrameworkScaled  = 117,

        WA_SetWindowModality = 118,
        WA_WState_WindowOpacitySet = 119, // internal
        WA_TranslucentBackground = 120,

        WA_AcceptTouchEvents = 121,
        WA_WState_AcceptedTouchBeginEvent = 122,
        WA_TouchPadAcceptSingleTouchEvents = 123,

        WA_X11DoNotAcceptFocus = 126,
        WA_MacNoShadow = 127,

        WA_AlwaysStackOnTop = 128,

        WA_TabletTracking = 129,

        // Add new attributes before this line
        WA_AttributeCount = 130;
        
    void runOnUi(Runnable task){
		synchronized(_uiloop_list){
			_uiloop_list.add(task);
        }
        Notify(NEW_UI_TASK_NID);
    }
    
    static void runOnThread(Runnable task){
		new Thread(){
			void run()override{
				task.run();
            }
        }.start();
    }
    
    final void onNotify(long eventid)override{
		if (eventid == NEW_UI_TASK_NID){
			while (_uiloop_list.size() > 0){
				Runnable r;
				synchronized(_uiloop_list){
					if (_uiloop_list.size() > 0){
						r = _uiloop_list.pollHead();
					}
				}
                if (r != nilptr){
					r.run();
                }
            }
        }else{
			onNotification(eventid);
        }
    }
    
   
    void onNotification(long eventid){
		if (_notifyListener != nilptr){
			_notifyListener.onNotify(this, eventid);
		}
    }
    
    QXWidget(long h){
        super(h);
    }
    
    bool create(){
        nativehandle = createQObject(QType.qtWidget, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    
    void setAttribute(int flag, bool bOn){
		widget_set_int_bool_value(nativehandle, QXCore.SETATTRIBUTE, flag, bOn);
    }
    
    bool create(QXWidget parent){
        nativehandle = createQObject(QType.qtWidget, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    
    bool load(String uifile){
        nativehandle = locaUiFile(uifile, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    bool load(String uifile, QXWidget parent){
        nativehandle = locaUiFile(uifile, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    bool load(QXBuffer data){
        nativehandle = locaUiData(data.nativehandle, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    bool load(QXBuffer data, QXWidget parent){
        nativehandle = locaUiData(data.nativehandle, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    void setParent(QXWidget parent){
        widget_set_native_value(nativehandle, QXCore.PARENTWIDGET, parent.nativehandle);
    }
    
    double getOpacity(){
        return widget_get_double_value(nativehandle,QXCore.OPACITY);
    }
    
    void setModal(bool bm){
        widget_set_bool_value(nativehandle, QXCore.MODAL, bm);
    }
    
    bool isVisible(){
        return widget_get_bool_value(nativehandle, QXCore.VISIBLE);
    }
    
    bool maximized(){
        return widget_get_bool_value(nativehandle, QXCore.MAXIMIZED);
    }
    
    bool minimized(){
        return widget_get_bool_value(nativehandle, QXCore.MINIMIZED);
    }
    
    bool isEnabled(){
        return widget_get_bool_value(nativehandle, QXCore.ENABLED);
    }
    
    bool isActive(){
        return widget_get_bool_value(nativehandle, QXCore.ACTIVED);
    }
        
        
    
    void setOpacity(double v){
        widget_set_double_value(nativehandle,QXCore.OPACITY, v);
    }
    
    void setVisible(bool v){
        widget_set_bool_value(nativehandle, QXCore.VISIBLE, v);
    }
    
    void setMaximized(bool v){
        widget_set_bool_value(nativehandle, QXCore.MAXIMIZED, v);
    }
    
    void setMinimized(bool v){
        widget_set_bool_value(nativehandle, QXCore.MINIMIZED, v);
    }
    
    void setEnabled(bool v){
        widget_set_bool_value(nativehandle, QXCore.ENABLED, v);
    }
    
    void setActive(bool v){
        widget_set_bool_value(nativehandle, QXCore.ACTIVED, v);
    }
       
    void setFocusPolicy(int fcy)   {
		widget_set_vint_value(nativehandle, QXCore.SETFOCUSPOLICY, fcy);
    }
       
    int getFocusPolicy(){
		return widget_get_int_value(nativehandle, QXCore.SETFOCUSPOLICY);
    }
    int getMinimumHeight(){
        return widget_get_int_value(nativehandle, QXCore.MINIMUMHEIGHT);
    }
    
    int getMaximumHeight(){
        return widget_get_int_value(nativehandle, QXCore.MAXIMUMHEIGHT);
    }
    
    int getMinimumWidth(){
        return widget_get_int_value(nativehandle, QXCore.MINIMUMWIDTH);
    }
    
    int getMaximumWidth(){
        return widget_get_int_value(nativehandle, QXCore.MAXIMUMWIDTH);
    }
    
    int x(){
        return widget_get_int_value(nativehandle, QXCore.X_POS);
    }
    
    int y(){
        return widget_get_int_value(nativehandle, QXCore.Y_POS);
    }
    
    int width(){
        return widget_get_int_value(nativehandle, QXCore.WIDTH);
    }
    
    int height(){
        return widget_get_int_value(nativehandle, QXCore.HEIGHT);
    }
    
    bool isFullScreen(){
        return widget_get_bool_value(nativehandle, QXCore.FULLSCREEN);
    }
    
    bool isHidden(){
        return widget_get_bool_value(nativehandle, QXCore.HIDDEN);
    }
    
    bool isModal(){
        return widget_get_bool_value(nativehandle, QXCore.MODAL);
    }
    
    bool isWindow(){
        return widget_get_bool_value(nativehandle, QXCore.WINDOW);
    }
    
    void resize(int w,int h){
        widget_set_v2int_value(nativehandle, QXCore.RESIZE, w, h);
    }
    
    void scroll(int dx,int dy){
        widget_set_v2int_value(nativehandle, QXCore.SCROLL, dx, dy);
    }
        
    void setBackgroundRole(int role){
        widget_set_bkrl(nativehandle, role);
    }
    
    void setCursor(){
    
    }
    
    void move(int x,int y){
        widget_set_v2int_value(nativehandle, QXCore.MOVE, x, y);
    }
    
    void setFixedHeight(int h){
        widget_set_vint_value(nativehandle, QXCore.FIXEDHEIGHT, h);
    }
    
    void setWindowFlags(int flag/*WindowType*/){
        widget_set_vint_value(nativehandle, QXCore.WINDOWFLAG, flag);
    }
    
    void setWindowFlag(int flag/*WindowType*/, bool bOn){
        widget_set_int_bool_value(nativehandle, QXCore.SETWINDOWFLAG, flag, bOn);
    }
    String getStyleSheet(){
		return core_getString(nativehandle, GETSTYLESHEEY);
    }
    void addAction(QXAction action){
		widget_set_native_value(nativehandle, ADDDEFACTION, action.nativehandle);
	}
	void addActions(QXAction []actions){
		long [] al = new long[actions.length];
		for (int i =0; i < al.length; i ++){
			al[i] = actions[i].nativehandle;
		}
		widget_set_object_value(nativehandle, ADDDEFACTION, al);
	}
	
	void setWindowIcon(String icon){
		widget_slot_string(nativehandle, QXCore.WINDOWICON, icon);
	}
	void setContextMenuPolicy(int v){
		widget_set_vint_value(nativehandle, SETCONTEXTMENUPOLICY, v);
	}
    void setFixedSize(int w, int h){
        widget_set_v2int_value(nativehandle, QXCore.FIXEDSIZE, w, h);
    }
    void setFontDescrption(String desc){
        widget_slot_string(nativehandle, QXCore.SETWIDGETFONT, desc);
    }
    void setFixedWidth(int w){
        widget_set_vint_value(nativehandle, QXCore.FIXEDWIDTH, w);
    }
    
    void setPalette(int flags, int color){
		widget_set_v2int_value(nativehandle, QXCore.PALETTE, flags, color);
    }
    
    void 
    setPalette(QXPalette palette){
        widget_set_native_value(nativehandle, QXCore.PALETTE, palette.nativehandle);
    }
    
    void 
    setStyle(QXStyle style){
        widget_set_native_value(nativehandle, QXCore.STYLE, style.nativehandle);
    }
    
    //virtual 
    void close(){
        widget_slot(nativehandle, QXCore.CLOSE);
    }
    void hide(){
        widget_slot(nativehandle, QXCore.HIDE);
    }
    void lower(){
        widget_slot(nativehandle, QXCore.LOWER);
    }
    void raise(){
        widget_slot(nativehandle, QXCore.RAISE);
    }
    void repaint(){
        widget_slot(nativehandle, QXCore.REPAINT);
    }
    void update(){
        widget_slot(nativehandle, QXCore.UPDATE);
    }
    void setFocus(){
        widget_slot(nativehandle, QXCore.SETFOCUS);
    }
    
    void 
    setWindowTitle(String text){
        widget_slot_string(nativehandle, QXCore.WINDOWTITLE, text);
    }
    
    void 
    show(){
        widget_slot(nativehandle, QXCore.SHOW);
    }
    void 
    showFullScreen(){
        widget_slot(nativehandle, QXCore.SHOWFULLSCREEN);
    }
    void 
    showMaximized(){
        widget_slot(nativehandle, QXCore.SHOWMAX);
    }
    void 
    showMinimized(){
        widget_slot(nativehandle, QXCore.SHOWMIN);
    }
    void 
    showNormal(){
        widget_slot(nativehandle, QXCore.SHOWNORMAL);
    }
    int Critical(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXERR, caption, text, button, defaultBtn);
    }
    int Warning(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXWAR, caption, text, button, defaultBtn);
    }
    
    int Question(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXQUE, caption, text, button, defaultBtn);
    }
    int Information(String caption, String text, int button, int defaultBtn){
        return long_string2_int2(nativehandle, MESSAGEBOXINF, caption, text, button, defaultBtn);
    }
    
    void About(String caption, String text){
        long_string2_int2(nativehandle, MESSAGEBOXABT, caption, text, 0, 0);
    }
    
    void setCursor(int cursor){
		widget_set_vint_value(nativehandle, SETCURSOR, cursor);
    }
    
    QPoint mapTo(QXWidget w, int x,int y){
		long v = x;
        v = (v << 32) | y;
		v = long_intlong2(nativehandle, MAPPOINT, w.nativehandle, v);
        return new QPoint(v);
    }
    QPoint mapToGlobal(int x,int y){
		long v = x;
        v = (v << 32) | y;
		v = long_intlong2(nativehandle, MAPPOINT, 0, v);
        return new QPoint(v);
    }
    QPoint mapFromGlobal(int x,int y){
		long v = x;
        v = (v << 32) | y;
		v = long_intlong2(0, MAPPOINT, nativehandle, v);
        return new QPoint(v);
    }
    QXPoint getScreenPoint(int num){
        long xy = object_get_long_int(nativehandle, QXCore.SCREENPOSITION, num, 0);
        return new QXPoint((xy >> 32) & 0xffffffff, xy & 0xffffffff);
    }
    QXPoint getCurrentScreenPoint(){
        long xy = object_get_long_int(nativehandle, QXCore.SCREENPOSITION, -1, 0);
        return new QXPoint((xy >> 32) & 0xffffffff, xy & 0xffffffff);
    }
    QXRect getScreenSize(int num){
        long wh = object_get_long_int(nativehandle, QXCore.SCREENSIZE, num, 0);
        return new QXRect(0, 0, (wh >> 32) & 0xffffffff, wh & 0xffffffff);
    }
    QXRect getCurrentScreenSize(){
        long wh = object_get_long_int(nativehandle, QXCore.SCREENSIZE, -1, 0);
        return new QXRect(0, 0, (wh >> 32) & 0xffffffff, wh & 0xffffffff);
    }
    int getCurrentScreen(){
		return widget_get_int_value(nativehandle, QXCore.CURRENTSCREEN);
    }
    	//不能在工作线程中update 要在UI线程中执行
    final void postUpdate(){
		runOnUi(new Runnable(){
			void run()override{
				QXWidget.this.update();
            }
        });
    }
    void setStyleSheet(String file){
		widget_slot_string(nativehandle, QXCore.SETSTYLESHEET, file);
    }
	void setStyleSheetString(String stylesheet){
		widget_slot_string(nativehandle, QXCore.SETSTYLESHEETSTRING, stylesheet);
	}
    void setWhatsThis(String tips){
		widget_slot_string(nativehandle, QXCore.SETWHATSTHIS, tips);
    }
    void centerScreen(){
		QXRect rc = getCurrentScreenSize();
        rc.offset(getCurrentScreenPoint());
        move((rc.width() - width()) / 2, (rc.height() - height()) / 2);
    }
    
    bool hasFocus(){
		return widget_get_bool_value(nativehandle, QXCore.HASFOCUS);
    }
};