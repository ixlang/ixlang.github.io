

class ArgsProcessor
{
    String[] args;
    int cmd = 0;
    String configure = nilptr;
    String targetpath = nilptr;
    String xcross = nilptr;
    String arch = nilptr;
    String project = nilptr;

    static const int CMD_INSTXP = 1,
                     CMD_LOADXPRJ = 2,
                     CMD_BUILD = 3;

    ArgsProcessor(String []_arg)
    {
        args = _arg;
        if (args.length > 1) {
            //		__XInterrupt(0);
            if (args[1].equals("-installpkg")) {
                cmd = CMD_INSTXP;
            } else if (args[1].equals("-build")) {
                cmd = CMD_BUILD;
            } else {
                cmd = CMD_LOADXPRJ;
            }
        }
    }

    int getCommand()
    {
        return cmd;
    }

    bool parse()
    {
        if (cmd == CMD_BUILD) {
            if (args[1].equals("-build")) {
                for (int i = 2; i < args.length; i++) {
                    if (args[i].startWith("--config=")) {
                        configure = args[i].substring(9,args[i].length());
                    } else if (args[i].startWith("--targetdir=")) {
                        targetpath = args[i].substring(12,args[i].length());
                    } else if (args[i].startWith("--xcross=")) {
                        xcross = args[i].substring(9,args[i].length());
                    } else if (args[i].startWith("--arch=")) {
                        arch = args[i].substring(7,args[i].length());
                    } else if (args[i].startWith("--project=")) {
                        project = args[i].substring(10,args[i].length());
                    } else {
                        _system_.consoleWrite("unknow args:" + args[i] + "\n");
                        printfHelp();
                        return false;
                    }
                } 
            }
        }
        return true;
    }

    void printfHelp()
    {
        _system_.consoleWrite("\nXStudio build command:\n" +
                              "e.g XStudio -build <options>\n" +
                              "--config=<Config Name>\n" +
                              "--targetdir=<target Directory>\n" +
                              "--xcross=<target OS:[windows|linux|darwin]>\n" +
                              "--arch=<target OS:[x86|x86_64|arm|arm64|mips]>\n" +
                              "--project=<Project file : *.xprj>\n");
    }
};


class QxApp : QXApplication
{
    QXMainWindow mainWindow;
    XWndClass wndclass ;
    XWndSln wndsln;
    XStackInfor wndStack;
    XWndOutput wndOutput;
    XWndInfor wndInfor;
    XFindresWnd findWnd;
    AutoWnd autoWndInfo;
    WatchWnd watchWndInfo;
    BreakPointWnd bpWndInfo;
    XMemoryWnd memoryWnd;
    XLogcatWnd logcatWnd;
    XWndObjectDump xDumpWnd;
    MemoryLookupWnd memlookupWnd;

    static String [] _appargs;
    static QxApp _theApp;
    static String lastTask = nilptr;
    static StatusBarMgr statusBar = new StatusBarMgr();

    XWorkspace _mdispace;
    XMenuManager menuMgr = new XMenuManager();

    void finalize()override
    {
        super.finalize();
    }

    IXStudioController _xstudio_controller = new IXStudioController()
    {
        WorkspaceController getWorkspace()override {
            if (_mdispace != nilptr) {
                return _mdispace.getController();
            }
            return nilptr;
        }
    };

    Object onCreateXObject(long object, String objectClass)
    {
        if (objectClass.equals("QMdiArea")) {
            return new XWorkspace(object);
        }
        return super.onCreateXObject(object, objectClass);
    }

    //创建面板
    void createDocks()
    {
        wndclass = (XWndClass)mainWindow.attachByName(new XWndClass(), "wnd_classview");
        wndsln = (XWndSln)mainWindow.attachByName(new XWndSln(), "wnd_slnview");
        wndOutput = (XWndOutput)mainWindow.attachByName(new XWndOutput(), "wnd_output");
        wndInfor = (XWndInfor)mainWindow.attachByName(new XWndInfor(), "wnd_info");
        wndStack = (XStackInfor)mainWindow.attachByName(new XStackInfor(), "stackinfo");
        autoWndInfo = (AutoWnd)mainWindow.attachByName(new AutoWnd(), "autoinfo");
        watchWndInfo = (WatchWnd)mainWindow.attachByName(new WatchWnd(), "watchinfo");
        bpWndInfo = (BreakPointWnd)mainWindow.attachByName(new BreakPointWnd(), "bpinfo");
        memlookupWnd = (MemoryLookupWnd)mainWindow.attachByName(new MemoryLookupWnd(), "memlookup");
        findWnd=  (XFindresWnd)mainWindow.attachByName(new XFindresWnd(), "findinfo");
        memoryWnd =  (XMemoryWnd)mainWindow.attachByName(new XMemoryWnd(), "memoryinfo");
        logcatWnd =  (XLogcatWnd)mainWindow.attachByName(new XLogcatWnd(), "wnd_log");
        xDumpWnd  =  (XWndObjectDump)mainWindow.attachByName(new XWndObjectDump(), "gcinfo");
    }


    void reconfig()
    {
        loadConfig();
        wndOutput.reconfig();
        XSourceEditor.reconfig();
        XMemoryWnd.reconfig();
        memlookupWnd.reconfig();
    }

    void loadConfig()
    {
        if (Setting.isDarkStyle()) {
            setStyleSheet("res/qss/black.qss");
        } else {
            setStyleSheetString("#indexForm {background: #f0f0f0 }");
        }
    }


    void processArgs()
    {
        if (_appargs.length > 1) {
            if (_appargs[1].equals("uacdebug")) {
                if (_mdispace.loadProject(_appargs[2])) {
                    _mdispace.debugRun();
                }
            } else {
                _mdispace.openFile( _appargs[1]);
            }
        }
    }

    bool createWorkspace()
    {
        mainWindow = new QXMainWindow();
        /*Resource.getData(Resource.RES_MAINWINDOW)*/
        if (mainWindow.load("ui/mainwindow.ui") == false) {
            return false;
        }
        mainWindow.setAcceptDrops(true);
        loadConfig();

        //setPaletteColor("#F0F0F0");
        /*mainWindow.setOnActivateListener(new onActivateListener(){
        	void onWindowActivate(QXObject obj){
        		((QXWidget)obj).setOpacity(1.0);
        	}
        	void onWindowDeactivate(QXObject obj){
        		((QXWidget)obj).setOpacity(0.8);
        	}
        });*/

        menuMgr.init(this);
        createDocks();

        _mdispace = (XWorkspace)mainWindow.findByName("mdiArea");
        _mdispace.setMainWindow(mainWindow);
        _mdispace.setSlnView(wndsln);
        _mdispace.setStackView(wndStack);
        _mdispace.setupOnDrag(_mdispace);
        _mdispace.setupOnDrag(mainWindow);
        wndclass.workspace = _mdispace;

        /*mainWindow.getCentralWindow().setOnLayoutEventListener(new onLayoutEventListener(){
        		void onResize(QXObject obj, int w, int h, int oldw, int oldh)override {
        			if (_mdispace != nilptr){
        				_mdispace.resize(w, h);
        			}
        		}
        }); */

        //mainWindow.resize(800, 600);
        ProjectPropManager.registryAllProp();
        statusBar.create(mainWindow);
        mainWindow.show();

        Utils.chechUpdate(0);

        mainWindow.setWindowTitle("XStudio");
        mainWindow.setOnStatusListener(new onStatusListener() {
            bool onClose(QXObject obj) {
                if (XSourceEditor.closeAllWindows()) {
                    if (_mdispace.requestQuit()) {
                        _mdispace.closeIndexPage();
                        String statefile = XPlatform.getAppDirectory().appendPath("x.save");
                        try {
                            byte [] state = mainWindow.saveState();
                            if (state != nilptr) {
                                FileOutputStream fos = new FileOutputStream(statefile);
                                fos.write(state);
                                fos.close();
                            }
                        } catch(Exception e) {

                        }
                        if (QxApp.lastTask != nilptr) {
                            if (false == openLocal(QxApp.lastTask)) {
                                QXMessageBox.Critical("失败", "未能以提升的权限运行, 请重试或者确认操作无误.", QXMessageBox.Ok, QXMessageBox.Ok);
                                return false;
                            }
                        }
                        return true;
                    }
                }
                return false;
            }
        });


        wndInfor._mdi_area = _mdispace;
        Builder.output = wndOutput;
        Builder.infownd = wndInfor;
        XMenuManager.setProjectLoaded(false);
        XMenuManager.setDocumentOpened(false);

        String statefile = XPlatform.getAppDirectory().appendPath("x.save");
        try {
            FileInputStream fis = new FileInputStream(statefile);
            byte []data = fis.read();
            if (data != nilptr) {
                mainWindow.loadState(data);
            }
            fis.close();
        } catch(Exception e) {

        }

        loadPlusins();

        _mdispace.openIndexPage();
        processArgs();
        Setting.applySetting();
        return true;
    }

    void loadPlusins()
    {
        FileSystem.File fp = new FileSystem.File(_system_.getAppDirectory().appendPath("plugins"));
        List<FileSystem.File> plugins = fp.listFiles();
        if (plugins != nilptr) {
            List.Iterator<FileSystem.File> iter = plugins.iterator();
            while (iter.hasNext()) {
                FileSystem.File pfile = iter.next();
                try {
                    if (pfile.isDir() == false){ 
                        _system_.loadLibrary(pfile.getPath());
                    }
                } catch(Exception e) {

                }
            }
        }

        PluginsController.initPlugins(_xstudio_controller);
    }

    bool preprocessArgs()
    {
        if (_appargs.length > 1) {
            if (_appargs[1].equals("-installpkg")) {
                loadConfig();
                PackageViewer.Install(_appargs[2]);
                return true;
            }
        }
        return false;
    }

    bool create()
    {
        if (super.createQXApplication()) {
            loadTranslator("translator/qt_zh_CN.qm");

            _theApp = this;
            if (Recently.isFirstRun()) {
                return FirstPrepare.showFirstRun(this);
            } else {
                if (preprocessArgs()) {
                    return true;
                }
                return createWorkspace();
            }
        }
        return false;
    }


    static void runConsoleBuild(ArgsProcessor argspro)
    {
        _system_.createConsole();

        if (argspro.parse()) {
            Project proj = new Project();
            Builder _builder = new Builder(true);
            ProjectPropManager.registryAllProp();

            if (proj.loadWorkspace(argspro.project, true)) {

                if (argspro.configure != nilptr) {
                    if (false == proj.setCurrentConfigure(argspro.configure, false)) {
                        _system_.consoleWrite(XPlatform.converToPlatformCharSet( "\n项目不包含配置:" + argspro.configure) + "\n");
                        return ;
                    }
                }

                if (argspro.targetpath != nilptr) {
                    proj.currentConfig.setOption("outpath", argspro.targetpath);
                }
                if (argspro.arch != nilptr) {
                    proj.currentConfig.setOption("wtype", "-arch:" + argspro.arch);
                }
                if (argspro.xcross != nilptr) {
                    proj.currentConfig.setOption("ostype", "-xcross-" + argspro.xcross);
                }

                proj.thread_build(_builder, new BuildListener() {
                    void onBuild(bool success)override {
                        _system_.consoleWrite(XPlatform.converToPlatformCharSet( "\n组建" + (success?"已执行." : "未能执行.") + "\n"));
                    }

                },nilptr);
            }
        }
    }

    static int main(String [] args)
    {
        _system_.chdir( _system_.getAppDirectory());
        ArgsProcessor argspro = new ArgsProcessor(args);
        if (argspro.getCommand() == ArgsProcessor.CMD_BUILD) {
            runConsoleBuild(argspro);
            return 0;
        }
        QxApp app = new QxApp();
        QxApp._appargs = args;
        if (app.create()) {
            app.run();
        }
        app = nilptr;
        return 0;
    }

};

